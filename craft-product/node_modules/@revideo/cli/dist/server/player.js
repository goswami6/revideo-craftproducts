"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.player = exports.createHotReloader = exports.buildProject = void 0;
const vite_plugin_1 = __importDefault(require("@revideo/vite-plugin"));
const chokidar_1 = require("chokidar");
const fs_1 = require("fs");
const vite_1 = require("vite");
const YELLOW_DOT = '\u001b[33m•\u001b[0m';
const GREEN_CHECK = '\u001b[32m✔\u001b[0m';
const RED_CROSS = '\u001b[31m✘\u001b[0m';
const fileNotFoundMessage = (filePath) => `${YELLOW_DOT} File ${filePath} not found. Building project...`;
const fileNotFoundAfterBuildingMessage = (filePath, padding) => `\r${RED_CROSS} File ${filePath} still not found after building project...`.padEnd(padding, ' ') + '\n';
const fileChangedMessage = (filePath) => `${YELLOW_DOT} File ${filePath} has changed. Rebuilding...`;
const successMessage = (time, padding) => `\r${GREEN_CHECK} Project built successfully. ${time}ms`.padEnd(padding, ' ') + '\n';
async function buildProject() {
    try {
        await (0, vite_1.build)({
            configFile: false,
            plugins: [(0, vite_plugin_1.default)({ project: process.env.PROJECT_FILE })],
            build: {
                outDir: 'dist',
                rollupOptions: {
                    output: {
                        entryFileNames: '[name].js',
                        chunkFileNames: '[name].js',
                        assetFileNames: '[name].[ext]',
                    },
                },
            },
        });
    }
    catch (error) {
        console.error('Error building project:', error);
        throw error;
    }
}
exports.buildProject = buildProject;
/**
 * Watches the given directory for changes and rebuilds the project on each change.
 * @param dir - Directory to watch for changes.
 */
async function createHotReloader(dir) {
    const watcher = (0, chokidar_1.watch)(dir, {
        ignored: ['**/*.meta'],
    });
    watcher.on('change', async (path) => {
        const rebuildingMessage = fileChangedMessage(path);
        process.stdout.write(rebuildingMessage);
        const start = Date.now();
        try {
            await buildProject();
            process.stdout.write(successMessage(Date.now() - start, rebuildingMessage.length + 1));
        }
        catch (e) {
            // TODO: Add more detailed error message
            console.error('Error building project. Try to run `npm run build` manually and check for errors.');
        }
    });
}
exports.createHotReloader = createHotReloader;
async function player(req, res) {
    let path = `./dist/${req.params.file}`;
    if (req.params.file === 'project.js') {
        const playerFileName = (process.env.PROJECT_FILE ?? '')
            .split('/')
            .pop()
            ?.replace('.ts', '.js');
        path = `./dist/${playerFileName}`;
    }
    let buildTime = undefined;
    let error = false;
    // Check if the file exists and build the project if it doesn't.
    await fs_1.promises.access(path).catch(async () => {
        buildTime = Date.now();
        process.stdout.write(fileNotFoundMessage(path));
        await buildProject().catch(() => {
            res.status(500).send('Error building project');
        });
    });
    // If the file still doesn't exist, send an error response.
    await fs_1.promises.access(path).catch(() => {
        process.stdout.write(fileNotFoundAfterBuildingMessage(path, fileNotFoundMessage(path).length + 1));
        res.status(404).send(`File ${path} not found`);
        error = true;
    });
    if (error) {
        return;
    }
    // If we built the project, update the log message.
    if (buildTime) {
        process.stdout.write(successMessage(Date.now() - buildTime, fileNotFoundMessage(path).length + 1));
    }
    return res.sendFile(path, { root: './' });
}
exports.player = player;
