"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
const renderer_1 = require("@revideo/renderer");
const axios_1 = __importDefault(require("axios"));
const path_1 = __importDefault(require("path"));
const uuid_1 = require("uuid");
const utils_1 = require("../utils");
async function render(req, res) {
    const { callbackUrl } = req.body;
    if (callbackUrl) {
        await renderWithCallback(req, res);
    }
    else {
        await renderWithoutCallback(req, res);
    }
}
exports.render = render;
async function renderWithCallback(req, res) {
    // TODO: validate request body
    const { variables, callbackUrl, settings } = req.body;
    const tempProjectName = (0, uuid_1.v4)();
    const outputFileName = `${tempProjectName}.mp4`;
    res.json({ tempProjectName });
    try {
        await (0, renderer_1.renderVideo)({
            projectFile: process.env.PROJECT_FILE || '',
            variables,
            settings: {
                ...settings,
                outFile: outputFileName,
            },
        });
        const resultFilePath = path_1.default.join(process.cwd(), `output/${outputFileName}`);
        const downloadLink = `${req.protocol}://${req.get('host')}/download/${outputFileName}`;
        const response = await axios_1.default.post(callbackUrl, {
            tempProjectName,
            status: 'success',
            downloadLink,
        }, {
            headers: {
                // eslint-disable-next-line
                'Content-Type': 'application/json',
            },
        });
        if (response.status !== 200) {
            throw new Error('Callback URL responded with an error');
        }
        (0, utils_1.scheduleCleanup)(resultFilePath);
    }
    catch (error) {
        console.error(error);
        await axios_1.default.post(callbackUrl, {
            tempProjectName,
            status: 'error',
            error: error.message,
        }, {
            headers: {
                // eslint-disable-next-line
                'Content-Type': 'application/json',
            },
        });
    }
}
async function renderWithoutCallback(req, res) {
    // TODO: validate request body
    const { variables, streamProgress, settings } = req.body;
    const tempProjectName = `${(0, uuid_1.v4)()}.mp4`;
    const resultFilePath = path_1.default.join(process.cwd(), `output/${tempProjectName}`);
    if (streamProgress) {
        res.writeHead(200, {
            // eslint-disable-next-line
            'Content-Type': 'text/event-stream',
            // eslint-disable-next-line
            'Cache-Control': 'no-cache',
            // eslint-disable-next-line
            Connection: 'keep-alive',
        });
        const sendProgress = (worker, progress) => {
            res.write(`event: progress\n`);
            res.write(`data: ${JSON.stringify({ worker, progress })}\n\n`);
        };
        try {
            await (0, renderer_1.renderVideo)({
                projectFile: process.env.PROJECT_FILE || '',
                variables,
                settings: {
                    ...settings,
                    outFile: tempProjectName,
                    progressCallback: sendProgress,
                },
            });
            const downloadLink = `${req.protocol}://${req.get('host')}/download/${tempProjectName}`;
            res.write(`event: completed\n`);
            res.write(`data: ${JSON.stringify({ status: 'success', downloadLink })}\n\n`);
            res.end();
            (0, utils_1.scheduleCleanup)(resultFilePath);
        }
        catch (error) {
            console.error(error);
            res.write(`event: error\n`);
            res.write(`data: ${JSON.stringify({ status: 'error', message: error.message })}\n\n`);
            res.end();
        }
    }
    else {
        try {
            await (0, renderer_1.renderVideo)({
                projectFile: process.env.PROJECT_FILE || '',
                variables,
                settings: {
                    ...settings,
                    outFile: tempProjectName,
                },
            });
            const downloadLink = `${req.protocol}://${req.get('host')}/download/${tempProjectName}`;
            res.json({
                status: 'success',
                downloadLink: downloadLink,
            });
            (0, utils_1.scheduleCleanup)(resultFilePath);
        }
        catch (error) {
            console.error(error);
            res.status(500).json({
                status: 'error',
                message: error.message,
            });
        }
    }
}
