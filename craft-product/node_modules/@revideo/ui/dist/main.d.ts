import type { BoolMetaField } from '@revideo/core';
import { CanvasColorSpace } from '@revideo/core';
import { Color } from '@revideo/core';
import { ColorMetaField } from '@revideo/core';
import { ComponentChild } from 'preact';
import { ComponentChildren } from 'preact';
import { EnumMetaField } from '@revideo/core';
import { EventHandler } from '@revideo/core';
import { ExporterMetaField } from '@revideo/core';
import { FunctionComponent } from 'preact';
import { HTMLAttributes } from 'preact/compat';
import { Inputs } from 'preact/hooks';
import { JSX as JSX_2 } from 'preact';
import { JSX as JSX_3 } from 'preact/compat';
import { Logger } from '@revideo/core';
import { LogLevel } from '@revideo/core';
import { LogPayload } from '@revideo/core';
import { MetaField } from '@revideo/core';
import { MutableRef } from 'preact/hooks';
import { NumberMetaField } from '@revideo/core';
import type { ObjectMetaField } from '@revideo/core';
import type { Player } from '@revideo/core';
import { PlayerState } from '@revideo/core';
import { Plugin as Plugin_2 } from '@revideo/core';
import type { Presenter } from '@revideo/core';
import { PresenterState } from '@revideo/core';
import { Project } from '@revideo/core';
import type { ProjectMetadata } from '@revideo/core';
import { Provider } from 'preact';
import { RangeMetaField } from '@revideo/core';
import { ReadonlySignal } from '@preact/signals';
import { Ref } from 'preact';
import type { Renderer } from '@revideo/core';
import { RendererState } from '@revideo/core';
import { Scene } from '@revideo/core';
import type { SettingsMetadata } from '@revideo/core';
import { Signal } from '@preact/signals';
import { Signal as Signal_2 } from '@preact/signals-core';
import { SourceMapConsumer } from 'source-map-js';
import { Spacing } from '@revideo/core';
import type { StringMetaField } from '@revideo/core';
import style from './index.module.scss';
import { Subscribable } from '@revideo/core';
import { SubscribableValueEvent } from '@revideo/core';
import { ValueOf } from '@revideo/core';
import { Vector2 } from '@revideo/core';
import { Vector2MetaField } from '@revideo/core';

export declare function AccountTree(): JSX_2.Element;

export declare function Add(props: HTMLAttributes<SVGSVGElement>): JSX_3.Element;

declare interface Application {
    project: Project;
    player: Player;
    renderer: Renderer;
    presenter: Presenter;
    meta: ProjectMetadata;
    settings: SettingsMetadata;
    plugins: EditorPlugin[];
    logger: LoggerManager;
    inspection: Signal<Inspection>;
}

export declare function ApplicationProvider({ application, children, }: {
    application: Omit<Application, 'logger' | 'inspection'>;
    children: ComponentChildren;
}): JSX_2.Element;

export declare function AutoField({ value }: AutoFieldProps): JSX_2.Element;

export declare interface AutoFieldProps {
    value: any;
}

export declare function Badge({ children, badgeRef, level, }: BadgeInterface): JSX_2.Element;

export declare interface BadgeInterface {
    level?: LogLevel;
    children?: ComponentChildren;
    badgeRef?: Ref<HTMLDivElement>;
}

export declare function BoolMetaFieldView({ field }: BoolMetaFieldViewProps): JSX_2.Element;

export declare interface BoolMetaFieldViewProps {
    field: BoolMetaField;
}

export declare function borderHighlight(): Keyframe[];

export declare function Bug(): JSX_2.Element;

export declare function Button({ main, loading, className, ...props }: ButtonProps): JSX_2.Element;

export declare interface ButtonProps extends Omit<JSX_2.HTMLAttributes<HTMLButtonElement>, 'loading'> {
    main?: boolean;
    loading?: boolean;
}

export declare function ButtonSelect<T extends string | number>({ options, value, onChange, main, disabled, ...props }: ButtonSelectProps<T>): JSX_2.Element;

export declare type ButtonSelectProps<T> = Omit<ButtonProps, 'value' | 'onChange'> & SelectProps<T>;

export declare function Checkbox(props: InputProps): JSX_2.Element;

export declare function clamp(min: number, max: number, value: number): number;

export declare function Clear(): JSX_2.Element;

export declare function Close(): JSX_2.Element;

export declare function Collapse({ animated, ...props }: CollapseProps): JSX_2.Element;

export declare interface CollapseProps extends JSX_2.HTMLAttributes<HTMLDivElement> {
    open: boolean;
    children: ComponentChildren;
    animated?: boolean;
}

export declare function ColorField({ value }: ColorFieldProps): JSX_2.Element;

export declare interface ColorFieldProps {
    value: Color;
}

export declare function ColorInput({ value, onChange }: ColorInputProps): JSX_2.Element;

export declare interface ColorInputProps {
    value: Color | null;
    onChange: (value: string) => void;
}

export declare function Colorize(): JSX_2.Element;

export declare function ColorMetaFieldView({ field }: ColorMetaFieldViewProps): JSX_2.Element;

export declare interface ColorMetaFieldViewProps {
    field: ColorMetaField;
}

export declare function compareVersions(v1: string, v2: string): number;

export declare function ControlledExpandable({ title, children, open, setOpen, }: ControlledExpandableProps): JSX_2.Element;

export declare interface ControlledExpandableProps {
    title: string;
    children: ComponentChildren;
    open: boolean;
    setOpen: (value: boolean) => void;
}

export declare function DragIndicator(props: HTMLAttributes<SVGSVGElement>): JSX_3.Element;

declare interface DropCallback {
    (event: MouseEvent): void;
}

export declare function editor(project: Project): void;

export declare enum EditorPanel {
    VideoSettings = "video-settings-panel",
    Threads = "threads-panel",
    Console = "console-panel",
    Settings = "settings-panel",
    Timeline = "timeline-panel"
}

/**
 * Represents an editor plugin.
 *
 * @remarks
 * Passed to {@link makeEditorPlugin} to create a plugin.
 *
 * @experimental
 */
export declare interface EditorPlugin extends Plugin_2 {
    /**
     * Configuration for custom tabs displayed in the sidebar.
     */
    tabs?: PluginTabConfig[];
    /**
     * Top-level component that will wrap the entire editor.
     *
     * @remarks
     * Can be used for setting up global contexts.
     */
    provider?: FunctionComponent;
    /**
     * Configuration for custom overlays displayed on top of the preview.
     */
    previewOverlay?: PluginOverlayConfig;
    /**
     * Configuration for custom overlays displayed on top of the presentation.
     */
    presenterOverlay?: PluginOverlayConfig;
    /**
     * Configuration for custom inspectors displayed on the right.
     */
    inspectors?: PluginInspectorConfig[];
}

export declare function ElementSwitch<T extends string>({ value, cases, }: ElementSwitchProps<T>): JSX_2.Element;

export declare interface ElementSwitchProps<T extends string> {
    value: T;
    cases: Partial<Record<T, PluginTabConfig['paneComponent']>>;
}

export declare function emphasize(distancePixels?: number): ({
    translate: string;
    easing: string;
} | {
    translate: string;
    easing?: undefined;
})[];

export declare function EnumMetaFieldView({ field }: EnumMetaFieldViewProps): JSX_2.Element;

export declare interface EnumMetaFieldViewProps {
    field: EnumMetaField<any>;
}

export declare function Expandable({ title, children, open }: ExpandableProps): JSX_2.Element;

export declare interface ExpandableProps {
    title: string;
    children: ComponentChildren;
    open?: boolean;
}

export declare function FastForward(): JSX_2.Element;

export declare function FastRewind(): JSX_2.Element;

export declare function Field({ label, copy, children }: FieldProps): JSX_2.Element;

export declare interface FieldProps {
    label?: string;
    children: ComponentChildren;
    copy?: string;
}

export declare function FieldSet({ children, header, nested }: FieldSetProps): JSX_2.Element;

export declare interface FieldSetProps {
    children: ComponentChildren;
    header: ComponentChildren;
    nested?: boolean;
}

export declare function FieldSurface({ disabled, open, className, ...props }: FieldSurfaceProps): JSX_2.Element;

export declare interface FieldSurfaceProps extends JSX_2.HTMLAttributes<HTMLDivElement> {
    disabled?: boolean;
    open?: boolean;
}

export declare function FieldValue({ children, alignRight, grow, ...props }: FieldValueProps): JSX_2.Element;

export declare interface FieldValueProps extends JSX_2.HTMLAttributes<HTMLDivElement> {
    children: ComponentChildren;
    alignRight?: boolean;
    grow?: boolean;
}

export declare function findAndOpenFirstUserFile(stack: string): Promise<void>;

/**
 * Return the given duration in a HH:MM:SS format.
 *
 * @param duration - The duration in seconds.
 */
export declare function formatDuration(duration: number): string;

export declare function Fullscreen(): JSX_2.Element;

export declare function getItem<T>(key: string, initial: T): T;

export declare function getSourceCodeFrame(entry: StackTraceEntry): string | null;

export declare function Grid(): JSX_2.Element;

export declare function Group(props: JSX_2.HTMLAttributes<HTMLDivElement>): JSX_2.Element;

export declare function Header({ className, ...props }: JSX_2.HTMLAttributes<HTMLDivElement>): JSX_2.Element;

export declare function highlight(sizePixels?: number): ({
    boxShadow: string;
    easing: string;
} | {
    boxShadow: string;
    easing?: undefined;
})[];

export declare function HourglassBottom(): JSX_2.Element;

export declare function IconButton({ children, onClick, title, className, disabled, }: IconButtonProps): JSX_2.Element;

declare interface IconButtonProps {
    title?: string;
    onClick?: () => void;
    children: ComponentChildren;
    disabled?: boolean;
    className?: string;
}

export declare function IconCheckbox({ children, titleOn, titleOff, onChange, checked, main, }: IconCheckboxProps): JSX_2.Element;

declare interface IconCheckboxProps {
    children: ComponentChildren;
    titleOn?: string;
    titleOff?: string;
    onChange?: (value: boolean) => void;
    checked?: boolean;
    main?: boolean;
}

export declare function index(projects: ProjectData[]): void;

export declare function Input({ onChange, onChangeCapture, ...props }: InputProps_2): JSX_2.Element;

declare type InputProps = JSX_2.HTMLAttributes<HTMLInputElement>;

declare type InputProps_2 = JSX_2.HTMLAttributes<HTMLInputElement>;

export declare function InputSelect<T extends string | number>({ options, value, onChange, ...props }: InputSelectProps<T>): JSX_2.Element;

export declare type InputSelectProps<T> = Omit<JSX_2.HTMLAttributes<HTMLInputElement>, 'value' | 'onChange'> & SelectProps<T>;

export declare interface Inspection {
    key: string;
    payload: unknown;
}

export declare function isEditorPanel(value: string): value is EditorPanel;

export declare function Label(props: LabelProps): JSX_2.Element;

export declare const labelClipDraggingLeftSignal: Signal_2<number>;

declare type LabelProps = JSX_2.HTMLAttributes<HTMLLabelElement>;

export declare function Locate(): JSX_2.Element;

export declare class LoggerManager {
    private readonly logger;
    get onInspected(): Subscribable<string, EventHandler<string>>;
    private readonly inspected;
    get onErrorLogged(): SubscribableValueEvent<number>;
    private readonly errorCount;
    get onLogsChanged(): SubscribableValueEvent<LogPayload[]>;
    private readonly logs;
    constructor(logger: Logger);
    inspect(key: string): void;
    clear(): void;
    private readonly handleLog;
}

/**
 * A helper function for exporting editor plugins.
 *
 * @param plugin - The plugin configuration.
 *
 * @example
 * ```ts
 * export default makePlugin({
 *   name: 'my-custom-plugin',
 * });
 * ```
 *
 * @experimental
 */
export declare function makeEditorPlugin(plugin: EditorPlugin | (() => EditorPlugin)): () => EditorPlugin;

export declare function MetaFieldView({ field }: MetaFieldViewProps): JSX_2.Element;

declare interface MetaFieldViewProps {
    field: MetaField<any>;
}

export declare function MotionCanvas(): JSX_2.Element;

export declare enum MouseButton {
    Left = 0,
    Middle = 1,
    Right = 2
}

export declare enum MouseMask {
    None = 0,
    Primary = 1,
    Secondary = 2,
    Auxiliary = 4,
    Back = 8,
    Forward = 16
}

declare interface MoveCallback {
    (dx: number, dy: number, x: number, y: number): void;
}

export declare function Movie(): JSX_2.Element;

export declare function Navigation(): JSX_2.Element;

export declare function NumberField({ value }: NumberFieldProps): JSX_2.Element;

export declare interface NumberFieldProps {
    value: number;
}

export declare function NumberInput({ value, onChange, min, max, step, ...props }: NumberInputProps): JSX_2.Element;

declare type NumberInputProps = Omit<JSX_2.HTMLAttributes<HTMLInputElement>, 'value' | 'onChange' | 'min' | 'max' | 'step'> & {
    value: number;
    onChange: (value: number) => void;
    min?: number;
    max?: number;
    step?: number;
};

export declare function NumberInputSelect({ options, value, onChange, ...props }: NumberInputSelectProps): JSX_2.Element;

export declare type NumberInputSelectProps = Omit<JSX_2.HTMLAttributes<HTMLInputElement>, 'value' | 'onChange' | 'min' | 'max' | 'step'> & SelectProps<number> & {
    value: number;
    min?: number;
    max?: number;
    step?: number;
};

export declare function NumberMetaFieldView({ field }: NumberMetaFieldViewProps): JSX_2.Element;

export declare interface NumberMetaFieldViewProps {
    field: NumberMetaField;
}

export declare function NumericField({ children, precision, ...props }: NumericFieldProps): JSX_2.Element;

export declare interface NumericFieldProps extends FieldProps {
    children: number;
    precision?: number;
}

export declare function ObjectMetaFieldView({ field }: ObjectMetaFieldViewProps): JSX_2.Element;

export declare interface ObjectMetaFieldViewProps {
    field: ObjectMetaField<any>;
}

export declare function openFileInEditor(entry: StackTraceEntry): Promise<void>;

export declare function OpenInNew(): JSX_2.Element;

export declare function openOutputPath(): Promise<void>;

/**
 * A wrapper for custom overlays.
 *
 * @remarks
 * Used to implement {@link PluginOverlayConfig.component}.
 *
 * @param className - The class name to apply to the overlay.
 * @param rest - Any other props to pass to the div. Can be used to hook up
 *               pointer events.
 */
export declare function OverlayWrapper({ className, ...rest }: PreviewCanvasProps): JSX_2.Element;

export declare function Pane({ title, id, children, ...props }: PaneProps): JSX_2.Element;

declare interface Panel {
    current: ReadonlySignal<string | null>;
    isHidden: ReadonlySignal<boolean>;
    set(value: string | null): void;
}

declare interface Panels {
    sidebar: Panel;
    bottom: Panel;
    tabs: PluginTabConfig[];
    inspectors: PluginInspectorConfig[];
}

export declare function PanelsProvider({ children }: {
    children: ComponentChildren;
}): JSX_2.Element;

export declare interface PaneProps extends JSX_2.HTMLAttributes<HTMLDivElement> {
    title: string;
    id?: string;
    children: ComponentChildren;
}

export declare function Pause(): JSX_2.Element;

export declare function PhotoCamera(): JSX_2.Element;

export declare function Pill({ children, checked, onChange, titleOn, titleOff, }: PillProps): JSX_2.Element;

export declare interface PillProps {
    children: ComponentChildren;
    checked: boolean;
    onChange: (value: boolean) => void;
    titleOn?: string;
    titleOff?: string;
}

export declare function PlayArrow(): JSX_2.Element;

export declare interface PluginDrawFunction {
    (ctx: CanvasRenderingContext2D, matrix: DOMMatrix): void;
}

/**
 * Configuration for a custom inspector in the editor.
 */
export declare interface PluginInspectorConfig {
    /**
     * A unique key representing the payload this inspector can handle.
     *
     * @remarks
     * This key will be matched against {@link Inspection.key} to determine if the
     * inspector should be displayed.
     */
    key: string;
    /**
     * The component displayed in the inspector.
     */
    component: FunctionComponent;
}

/**
 * Configuration for a custom overlay in the editor.
 */
export declare interface PluginOverlayConfig {
    /**
     * A hook returning a function used to draw on the overlay canvas.
     *
     * @remarks
     * This hook will be invoked at the top level of the overlay component. It can
     * use any Preact hooks and should return a {@link PluginDrawFunction} that
     * takes the context and uses it to draw the overlay. Reference comparison is
     * used to determine if the overlay should be redrawn.
     */
    drawHook?: () => PluginDrawFunction;
    /**
     * The component displayed on top of the canvas.
     *
     * @remarks
     * Can be used to display additional controls or information using HTML.
     * Usually implemented using {@link OverlayWrapper}.
     */
    component?: FunctionComponent;
}

/**
 * Configuration for a custom tab in the editor.
 */
export declare interface PluginTabConfig {
    /**
     * The name of this tab.
     *
     * @remarks
     * Used as a unique identifier within the scope of the plugin.
     */
    name: string;
    /**
     * The tab visible in the navigation bar on the left of the editor.
     */
    tabComponent: FunctionComponent<PluginTabProps>;
    /**
     * The pane displayed in the sidebar when the tab is selected.
     */
    paneComponent: FunctionComponent<PluginTabProps>;
}

/**
 * Properties passed to the {@link PluginTabConfig.tabComponent} and
 * {@link PluginTabConfig.paneComponent} by the editor.
 */
export declare interface PluginTabProps {
    /**
     * A unique identifier of the tab.
     *
     * @remarks
     * Generated by the editor based on the tab and plugin names. Should be passed
     * to the {@link Tab} component generated by the
     * {@link PluginTabConfig.tabComponent} to make the corresponding pane appear
     * when the tab is selected.
     */
    tab: string;
}

declare interface PreviewCanvasProps extends JSX_2.HTMLAttributes<HTMLDivElement> {
}

declare interface ProjectData {
    name: string;
    fileName: string;
    url: string;
}

export declare const projectNameSignal: Signal_2<string>;

export declare function RangeMetaFieldView({ field }: RangeMetaFieldViewProps): JSX_2.Element;

export declare interface RangeMetaFieldViewProps {
    field: RangeMetaField;
}

export declare function ReadOnlyInput({ className, ...props }: ReadOnlyInputProps): JSX_2.Element;

declare interface ReadOnlyInputProps extends JSX_2.HTMLAttributes<HTMLDivElement> {
}

export declare function Recenter(): JSX_2.Element;

export declare function Repeat(): JSX_2.Element;

export declare function ResizeableLayout({ id, children: [start, end], vertical, offset, hidden, }: ResizeableLayoutProps): JSX_2.Element;

declare interface ResizeableLayoutProps {
    id: string;
    vertical?: boolean;
    hidden: Signal<boolean>;
    offset?: number;
    children: [ComponentChild, ComponentChild];
}

export declare function resolveStackTrace(stack: string, firstOnly: true): Promise<StackTraceEntry>;

export declare function resolveStackTrace(stack: string): Promise<StackTraceEntry[]>;

export declare function Schedule(): JSX_2.Element;

export declare function School(): JSX_2.Element;

export declare function Science(): JSX_2.Element;

export declare function Select<T>({ options, value, onChange, title, main, disabled, className, }: SelectProps<T>): JSX_2.Element;

export declare interface SelectProps<T> {
    title?: string;
    options: {
        value: T;
        text: string;
    }[];
    className?: string;
    main?: boolean;
    disabled?: boolean;
    value: T;
    onChange: (value: T) => void;
}

export declare function Separator({ size, ...props }: SeparatorProps): JSX_2.Element;

export declare interface SeparatorProps extends JSX_2.HTMLAttributes<HTMLDivElement> {
    size?: number;
}

export declare function setItem(key: string, value: unknown): void;

export declare function Settings(): JSX_2.Element;

export declare function shake(distancePixels?: number): ({
    translate: string;
    easing?: undefined;
} | {
    translate: string;
    easing: string;
})[];

export declare function SkipNext(): JSX_2.Element;

export declare function SkipPrevious(): JSX_2.Element;

export declare function Slider({ value, onChange }: SliderProps): JSX_2.Element;

export declare interface SliderProps {
    value?: number;
    onChange?: (value: number) => void;
}

export declare function Space(): JSX_2.Element;

export declare function SpacingField({ value }: SpacingFieldProps): JSX_2.Element;

export declare interface SpacingFieldProps {
    value: Spacing;
}

export declare interface StackTraceEntry {
    file: string;
    uri: string;
    line: number;
    column: number;
    isExternal: boolean;
    functionName?: string;
    source?: string;
    sourceMap?: SourceMapConsumer;
}

export declare function storedSignal<T>(value: T, id: string, parse?: (value: any) => T): Signal<T>;

export declare function StringMetaFieldView({ field }: StringMetaFieldViewProps): JSX_2.Element;

export declare interface StringMetaFieldViewProps {
    field: StringMetaField;
}

export { style }

export declare function Tab({ className, tab, forwardRef, ...props }: TabProps): JSX_2.Element;

export declare function TabGroup({ children, ...rest }: TabGroupProps): JSX_2.Element;

export declare interface TabGroupProps extends TabsState {
    children: ComponentChildren;
}

export declare function TabLink({ className, href, disabled, ...props }: TabLinkProps): JSX_2.Element;

export declare interface TabLinkProps extends JSX_2.HTMLAttributes<HTMLAnchorElement> {
    children: ComponentChildren;
    disabled?: boolean;
}

export declare interface TabProps extends JSX_2.HTMLAttributes<HTMLButtonElement> {
    children: ComponentChildren;
    forwardRef?: Ref<HTMLButtonElement>;
    tab: string;
}

export declare function Tabs({ className, ...props }: JSX_2.HTMLAttributes<HTMLDivElement>): JSX_2.Element;

declare interface TabsState {
    tab: string | null;
    setTab: (tab: string | null) => void;
}

export declare function TimelineContextProvider({ state, children, }: {
    state: TimelineState;
    children: ComponentChildren;
}): JSX_2.Element;

export declare interface TimelineState {
    /**
     * Length of the visible area in pixels.
     */
    viewLength: number;
    /**
     * Scroll offset from the left in pixels. Measured from frame 0.
     */
    offset: number;
    /**
     * First frame covered by the infinite scroll.
     */
    firstVisibleFrame: number;
    /**
     * Last frame covered by the infinite scroll.
     */
    lastVisibleFrame: number;
    /**
     * Frames per pixel rounded to the closest power of two.
     */
    density: number;
    /**
     * Frames per timeline segment.
     */
    segmentDensity: number;
    /**
     * Convert frames to percents.
     */
    framesToPercents: (value: number) => number;
    /**
     * Convert frames to pixels.
     */
    framesToPixels: (value: number) => number;
    /**
     * Convert pixels to frames.
     */
    pixelsToFrames: (value: number) => number;
    /**
     * Convert current pointer position to frames.
     */
    pointerToFrames: (value: number) => number;
}

export declare function Toggle({ open, onToggle, animated, ...props }: ToggleProps): JSX_2.Element;

export declare interface ToggleProps extends Omit<JSX_2.HTMLAttributes<HTMLButtonElement>, 'onToggle'> {
    open?: boolean;
    onToggle?: (value: boolean) => void;
    animated?: boolean;
}

export declare function Tune(): JSX_2.Element;

export declare function UnfoldMore(): JSX_2.Element;

export declare function UnknownField({ value }: UnknownFieldProps): JSX_2.Element;

export declare interface UnknownFieldProps {
    value: any;
}

export declare function UnknownMetaFieldView({ field }: UnknownMetaFieldViewProps): JSX_2.Element;

export declare interface UnknownMetaFieldViewProps {
    field: MetaField<any>;
}

export declare function useApplication(): Application;

export declare function useCurrentFrame(): number;

export declare function useCurrentScene(): Scene<unknown>;

export declare function useDocumentEvent<T extends keyof DocumentEventMap>(type: T, listener: (this: Document, ev: DocumentEventMap[T]) => void, enabled?: boolean, capture?: boolean): void;

export declare function useDrag(onMove: MoveCallback, onDrop?: DropCallback, button?: number | null): [(event: MouseEvent) => void, boolean];

export declare function useDuration(): number;

export declare function useFormattedNumber(value: number, precision?: number): string;

export declare function useKeyHold(key: string): boolean;

export declare function usePanels(): Panels;

export declare function usePlayerState(): PlayerState;

export declare function usePlayerTime(): {
    frame: number;
    time: number;
    duration: number;
    durationTime: number;
    completion: number;
};

export declare function usePresenterState(): PresenterState;

export declare function usePreviewSettings(): ValueOf<{
    fps: NumberMetaField;
    resolutionScale: EnumMetaField<number>;
}>;

export declare function useReducedMotion(): boolean;

export declare function useRendererState(): RendererState;

export declare function useRenderingSettings(): ValueOf<{
    fps: NumberMetaField;
    resolutionScale: EnumMetaField<number>;
    colorSpace: EnumMetaField<CanvasColorSpace>;
    exporter: ExporterMetaField;
}>;

export declare function useScenes(): Scene<unknown>[];

export declare function useSharedSettings(): ValueOf<{
    background: ColorMetaField;
    range: RangeMetaField;
    size: Vector2MetaField;
    audioOffset: NumberMetaField;
}>;

export declare function useSize<T extends Element>(ref: MutableRef<T>): DOMRectReadOnly;

export declare function useStateChange<T extends Inputs>(onChange: (prev: T) => void, inputs: T): void;

export declare function useStorage<T>(id: string, initialState?: T): [T, (newState: T) => void, boolean];

export declare function useSubscribable<TValue, THandler extends EventHandler<TValue>>(event: Subscribable<TValue, THandler>, handler: THandler, inputs: Inputs): void;

export declare function useSubscribableValue<TValue>(value: SubscribableValueEvent<TValue>): TValue;

export declare function useTimelineContext(): TimelineState;

export declare function useViewportContext(): ViewportState;

/**
 * Get a matrix that transforms the overlay canvas space to the scene space.
 *
 * @remarks
 * When drawing a viewport overlay, the canvas overlays the entire preview
 * panel, no matter the zoom and pan of the scene itself. This ensures that
 * the gizmos drawn on top have high resolution no matter how zoomed-in the user
 * is.
 *
 * This matrix is used to transform the drawn points so that they appear where
 * they should be in the scene.
 */
export declare function useViewportMatrix(): DOMMatrix;

export declare function Vector2Field({ value }: Vector2FieldProps): JSX_2.Element;

export declare interface Vector2FieldProps {
    value: Vector2;
}

export declare function Vector2MetaFieldView({ field }: Vector2MetaFieldViewProps): JSX_2.Element;

export declare interface Vector2MetaFieldViewProps {
    field: Vector2MetaField;
}

export declare function Videocam(): JSX_2.Element;

export declare function VideoSettings(): JSX_2.Element;

export declare const ViewportProvider: Provider<ViewportState>;

export declare interface ViewportState {
    x: number;
    y: number;
    rect: DOMRectReadOnly;
    zoom: number;
    grid: boolean;
    resolutionScale: number;
}

export declare function VolumeOff(): JSX_2.Element;

export declare function VolumeOn(): JSX_2.Element;

export declare function Warning(): JSX_2.Element;

/**
 * Execute a given async function while displaying a loading indication.
 *
 * @param callback - A function to execute.
 */
export declare function withLoader(callback: () => Promise<unknown>): Promise<void>;

export { }
