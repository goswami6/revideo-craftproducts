"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.settingsPlugin = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
function settingsPlugin() {
    const settingsId = 'virtual:settings.meta';
    const resolvedSettingsId = '\0' + settingsId;
    const settingsPath = path_1.default.resolve(os_1.default.homedir(), '.revideo/settings.json');
    const outputDirectory = path_1.default.dirname(settingsPath);
    return {
        name: 'revideo:settings',
        resolveId(id) {
            if (id === settingsId) {
                return resolvedSettingsId;
            }
        },
        async load(id) {
            if (id === resolvedSettingsId) {
                let parsed = {};
                try {
                    parsed = JSON.parse(await fs_1.default.promises.readFile(settingsPath, 'utf8'));
                }
                catch (_) {
                    // Ignore an invalid settings file
                }
                return JSON.stringify(parsed);
            }
        },
        configureServer(server) {
            server.ws.on('revideo:meta', async ({ source, data }, client) => {
                if (source !== resolvedSettingsId) {
                    return;
                }
                await fs_1.default.promises.mkdir(outputDirectory, { recursive: true });
                const newData = JSON.stringify(data, undefined, 2);
                let oldData = '';
                try {
                    oldData = await fs_1.default.promises.readFile(settingsPath, 'utf8');
                }
                catch (_) {
                    // Ignore an invalid settings file
                }
                if (oldData !== newData) {
                    await Promise.all([
                        fs_1.default.promises.writeFile(settingsPath, newData, 'utf8'),
                        // Invalidate the module so that the settings are up-to-date next
                        // time the browser is refreshed.
                        server.moduleGraph.getModuleByUrl(source).then(module => {
                            if (module) {
                                server.moduleGraph.invalidateModule(module);
                            }
                        }),
                    ]);
                }
                client.send('revideo:meta-ack', { source });
            });
        },
    };
}
exports.settingsPlugin = settingsPlugin;
//# sourceMappingURL=settings.js.map