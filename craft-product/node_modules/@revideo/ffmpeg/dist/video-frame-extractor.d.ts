/// <reference types="node" />
type VideoFrameExtractorState = 'processing' | 'done' | 'error';
/**
 * Walks through a video file and extracts frames.
 */
export declare class VideoFrameExtractor {
    private static readonly pngSignature;
    private static readonly pngEOF;
    private static readonly jpegSOI;
    private static readonly jpegEOI;
    private static readonly chunkLengthInSeconds;
    private readonly ffmpegPath;
    state: VideoFrameExtractorState;
    filePath: string;
    private buffer;
    private imageBuffers;
    private hooksWaiting;
    private lastImage;
    private startTime;
    private duration;
    private toTime;
    private fps;
    private png;
    private framesProcessed;
    private codec;
    private process;
    private terminated;
    constructor(filePath: string, startTime: number, fps: number, duration: number, png?: boolean);
    getTime(): number;
    getLastTime(): number;
    getLastFrame(): Buffer | null;
    private getEndTime;
    private getArgs;
    private createFfmpegProcess;
    /**
     * We call this in the case that the time requested is greater than the
     * duration of the video. In this case, we want to display the first frame
     * of the video.
     *
     * Note: This does NOT match the behavior of the old implementation
     * inside of 2d/src/lib/components/Video.ts. In the old implementation, the
     * last frame is shown instead of the first frame.
     */
    private createFfmpegProcessToExtractFirstFrame;
    private processData;
    popImage(): Promise<Buffer | null>;
    private handleClose;
    private handleError;
    destroy(): void;
}
export {};
//# sourceMappingURL=video-frame-extractor.d.ts.map