"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rendererPlugin = void 0;
const ffmpeg_1 = require("@revideo/ffmpeg");
const fs = require("fs");
const path = require("path");
const RendererPath = path.resolve(__dirname, '../renderer.html');
const Content = fs.readFileSync(RendererPath, 'utf-8');
const HtmlParts = Content.toString().split('{{source}}');
function createHtml(src) {
    return HtmlParts[0] + src + HtmlParts[1];
}
function escapeSpecialChars(_, value) {
    if (typeof value === 'string') {
        /* eslint-disable no-useless-escape */
        return value
            .replace(/[\\]/g, '\\\\')
            .replace(/[\"]/g, '\\"')
            .replace(/[\/]/g, '\\/')
            .replace(/[\b]/g, '\\b')
            .replace(/[\f]/g, '\\f')
            .replace(/[\n]/g, '\\n')
            .replace(/[\r]/g, '\\r')
            .replace(/[\t]/g, '\\t');
        /* eslint-enable no-useless-escape */
    }
    return value;
}
function rendererPlugin(variables, customFfmpegSettings, projectFile) {
    if (customFfmpegSettings?.ffmpegPath) {
        ffmpeg_1.ffmpegSettings.setFfmpegPath(customFfmpegSettings.ffmpegPath);
    }
    if (customFfmpegSettings?.ffprobePath) {
        ffmpeg_1.ffmpegSettings.setFfprobePath(customFfmpegSettings.ffprobePath);
    }
    if (customFfmpegSettings?.ffmpegLogLevel) {
        ffmpeg_1.ffmpegSettings.setLogLevel(customFfmpegSettings.ffmpegLogLevel);
    }
    return {
        name: 'revideo-renderer-plugin',
        async load(id) {
            if (id.startsWith('\x00virtual:renderer')) {
                return `\
            import {render} from '@revideo/renderer/lib/client/render';
            import project from '${projectFile}?project';

            // Read video variables
            project.variables = ${variables ? `JSON.parse(\`${JSON.stringify(variables, escapeSpecialChars)}\`)` : 'project.variables'};

            // Check range of frames to render
            const url = new URL(window.location.href);

            const fileNameEscaped = url.searchParams.get('fileName');
            const workerId = url.searchParams.get('workerId');
            const totalNumOfWorkers = url.searchParams.get('totalNumOfWorkers');
            const startInSeconds = parseFloat(url.searchParams.get('startInSeconds'));
            const endInSeconds = parseFloat(url.searchParams.get('endInSeconds'));
            const hiddenFolderIdEscaped = url.searchParams.get('hiddenFolderId');
            const videoWidth = parseInt(url.searchParams.get('videoWidth'));
            const videoHeight = parseInt(url.searchParams.get('videoHeight'));

            const fileName = decodeURIComponent(fileNameEscaped);
            const hiddenFolderId = decodeURIComponent(hiddenFolderIdEscaped);

            // Overwrite project name so that the rendered videos don't overwrite each other
            project.name = fileName;

            render(project, workerId, totalNumOfWorkers, startInSeconds, endInSeconds, hiddenFolderId, videoWidth, videoHeight);
            `;
            }
        },
        configureServer(server) {
            server.middlewares.use('/render', (_req, res) => {
                res.setHeader('Content-Type', 'text/html');
                res.end(createHtml(`/@id/__x00__virtual:renderer`));
            });
        },
    };
}
exports.rendererPlugin = rendererPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXItcGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc2VydmVyL3JlbmRlcmVyLXBsdWdpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw0Q0FBK0Q7QUFDL0QseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUc3QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBQ2pFLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFekQsU0FBUyxVQUFVLENBQUMsR0FBVztJQUM3QixPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFFRCxTQUFTLGtCQUFrQixDQUFDLENBQVMsRUFBRSxLQUFhO0lBQ2xELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDOUIsc0NBQXNDO1FBQ3RDLE9BQU8sS0FBSzthQUNULE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO2FBQ3hCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO2FBQ3ZCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0IscUNBQXFDO0lBQ3ZDLENBQUM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFnQixjQUFjLENBQzVCLFNBQW1DLEVBQ25DLG9CQUFxQyxFQUNyQyxXQUFvQjtJQUVwQixJQUFJLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxDQUFDO1FBQ3JDLHVCQUFjLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFDRCxJQUFJLG9CQUFvQixFQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLHVCQUFjLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFDRCxJQUFJLG9CQUFvQixFQUFFLGNBQWMsRUFBRSxDQUFDO1FBQ3pDLHVCQUFjLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLHlCQUF5QjtRQUUvQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDWCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDO2dCQUMxQyxPQUFPOzttQ0FFb0IsV0FBVzs7O2tDQUdaLFNBQVMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsbUJBQW1COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7YUFxQnpILENBQUM7WUFDUixDQUFDO1FBQ0gsQ0FBQztRQUVELGVBQWUsQ0FBQyxNQUFNO1lBQ3BCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDOUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7Z0JBQzNDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLENBQUMsQ0FBQztZQUN0RCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQXpERCx3Q0F5REMifQ==