import { Renderer, Vector2 } from '@revideo/core';
/**
 * Render the project.
 * @param project - The project to render.
 * @param range - The range of frames to render.
 */
export const render = async (project, workerId, totalNumOfWorkers, startInSeconds, endInSeconds, hiddenFolderId, videoWidth, videoHeight) => {
    try {
        const renderer = new Renderer(project);
        const { firstGlobalFrame, lastGlobalFrame } = await getGlobalFirstAndLastFrame(project, renderer, startInSeconds, endInSeconds);
        const { firstWorkerFrame, lastWorkerFrame } = await getWorkerFirstAndLastFrame(firstGlobalFrame, lastGlobalFrame, workerId, totalNumOfWorkers);
        const renderSettings = {
            ...project.meta.getFullRenderingSettings(),
            name: project.name,
            hiddenFolderId: hiddenFolderId,
            range: [
                renderer.frameToTime(firstWorkerFrame),
                renderer.frameToTime(lastWorkerFrame),
            ],
        };
        if (videoWidth && videoHeight) {
            renderSettings.size = new Vector2({ x: videoWidth, y: videoHeight });
        }
        await renderer.render(renderSettings);
        window.onRenderComplete();
    }
    catch (e) {
        window.onRenderFailed(e.message);
    }
};
/**
 * Calculate the first and last "global" frame, i.e. frame independent of worker
 */
async function getGlobalFirstAndLastFrame(project, renderer, startSecondFromUser, endSecondFromUser) {
    const firstGlobalFrame = renderer.timeToFrame(startSecondFromUser);
    let lastGlobalFrame;
    // If end value is provided by user, lastFrame can be obtained.
    if (isFinite(endSecondFromUser)) {
        lastGlobalFrame = renderer.timeToFrame(endSecondFromUser);
    }
    else {
        // Otherwise, endSecondFromUser is infinity, so lastGlobalFrame is the duration of the video.
        const settings = {
            ...project.meta.getFullRenderingSettings(),
            name: project.name,
        };
        lastGlobalFrame = await renderer.getNumberOfFrames(settings);
    }
    return { firstGlobalFrame, lastGlobalFrame };
}
async function getWorkerFirstAndLastFrame(firstGlobalFrame, lastGlobalFrame, workerId, totalNumOfWorkers) {
    const videoDurationInFrames = lastGlobalFrame - firstGlobalFrame + 1;
    const framesPerWorker = Math.ceil(videoDurationInFrames / totalNumOfWorkers);
    const firstWorkerFrame = firstGlobalFrame + framesPerWorker * workerId;
    const lastWorkerFrame = Math.min(firstWorkerFrame + framesPerWorker, lastGlobalFrame);
    return { firstWorkerFrame, lastWorkerFrame };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vY2xpZW50L3JlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsUUFBUSxFQUFFLE9BQU8sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQVN6RDs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEtBQUssRUFDekIsT0FBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsaUJBQXlCLEVBQ3pCLGNBQXNCLEVBQ3RCLFlBQW9CLEVBQ3BCLGNBQXNCLEVBQ3RCLFVBQWtCLEVBQ2xCLFdBQW1CLEVBQ25CLEVBQUU7SUFDRixJQUFJLENBQUM7UUFDSCxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV2QyxNQUFNLEVBQUMsZ0JBQWdCLEVBQUUsZUFBZSxFQUFDLEdBQ3ZDLE1BQU0sMEJBQTBCLENBQzlCLE9BQU8sRUFDUCxRQUFRLEVBQ1IsY0FBYyxFQUNkLFlBQVksQ0FDYixDQUFDO1FBQ0osTUFBTSxFQUFDLGdCQUFnQixFQUFFLGVBQWUsRUFBQyxHQUN2QyxNQUFNLDBCQUEwQixDQUM5QixnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLFFBQVEsRUFDUixpQkFBaUIsQ0FDbEIsQ0FBQztRQUVKLE1BQU0sY0FBYyxHQUFHO1lBQ3JCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtZQUMxQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7WUFDbEIsY0FBYyxFQUFFLGNBQWM7WUFDOUIsS0FBSyxFQUFFO2dCQUNMLFFBQVEsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3RDLFFBQVEsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO2FBQ2xCO1NBQ3RCLENBQUM7UUFFRixJQUFJLFVBQVUsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUM5QixjQUFjLENBQUMsSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLEVBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFDLENBQUMsQ0FBQztRQUNyRSxDQUFDO1FBRUQsTUFBTSxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFBQyxPQUFPLENBQU0sRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25DLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILEtBQUssVUFBVSwwQkFBMEIsQ0FDdkMsT0FBZ0IsRUFDaEIsUUFBa0IsRUFDbEIsbUJBQTJCLEVBQzNCLGlCQUF5QjtJQUV6QixNQUFNLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNuRSxJQUFJLGVBQXVCLENBQUM7SUFFNUIsK0RBQStEO0lBQy9ELElBQUksUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztRQUNoQyxlQUFlLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVELENBQUM7U0FBTSxDQUFDO1FBQ04sNkZBQTZGO1FBQzdGLE1BQU0sUUFBUSxHQUFHO1lBQ2YsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFO1lBQzFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtTQUNuQixDQUFDO1FBQ0YsZUFBZSxHQUFHLE1BQU0sUUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsZUFBZSxFQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELEtBQUssVUFBVSwwQkFBMEIsQ0FDdkMsZ0JBQXdCLEVBQ3hCLGVBQXVCLEVBQ3ZCLFFBQWdCLEVBQ2hCLGlCQUF5QjtJQUV6QixNQUFNLHFCQUFxQixHQUFHLGVBQWUsR0FBRyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDckUsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDO0lBRTdFLE1BQU0sZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsZUFBZSxHQUFHLFFBQVEsQ0FBQztJQUN2RSxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUM5QixnQkFBZ0IsR0FBRyxlQUFlLEVBQ2xDLGVBQWUsQ0FDaEIsQ0FBQztJQUVGLE9BQU8sRUFBQyxnQkFBZ0IsRUFBRSxlQUFlLEVBQUMsQ0FBQztBQUM3QyxDQUFDIn0=