import { decorate, threadable } from '../decorators';
import { useLogger, useThread } from '../utils';
decorate(loop, threadable());
export function* loop(iterations, factory) {
    if (typeof iterations !== 'number') {
        factory = iterations;
        iterations = Infinity;
    }
    if (iterations === Infinity && useThread().parent === null) {
        useLogger().error({
            message: 'Tried to execute an infinite loop in the main thread.',
            remarks: "<p>Make sure to use <code>yield</code> or <code>spawn()</code> to execute the loop concurrently in a\nseparate thread:</p>\n<pre class=\"wrong\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));</code></pre><pre class=\"correct\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-title function_\">spawn</span>(<span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)));</code></pre><p>If you want to execute the loop a finite number of times, specify the iteration\ncount as the first argument:</p>\n<pre class=\"\"><code class=\"language-ts\"><span class=\"hljs-keyword\">yield</span>* <span class=\"hljs-title function_\">loop</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">rect</span>().<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">opacity</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));\n<span class=\"hljs-comment\">//          ^ iteration count</span></code></pre>",
            stack: new Error().stack,
        });
        return;
    }
    for (let i = 0; i < iterations; i++) {
        const generator = factory(i);
        if (generator) {
            yield* generator;
        }
        else {
            yield;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9vcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mbG93L2xvb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFZOUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBcUQ3QixNQUFNLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDbkIsVUFBaUMsRUFDakMsT0FBc0I7SUFFdEIsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUNuQyxPQUFPLEdBQUcsVUFBVSxDQUFDO1FBQ3JCLFVBQVUsR0FBRyxRQUFRLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksVUFBVSxLQUFLLFFBQVEsSUFBSSxTQUFTLEVBQUUsQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDM0QsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ2hCLE9BQU8sRUFBRSx1REFBdUQ7WUFDaEUsT0FBTywycUVBQWM7WUFDckIsS0FBSyxFQUFFLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSztTQUN6QixDQUFDLENBQUM7UUFDSCxPQUFPO0lBQ1QsQ0FBQztJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNwQyxNQUFNLFNBQVMsR0FBRyxPQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUNkLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNuQixDQUFDO2FBQU0sQ0FBQztZQUNOLEtBQUssQ0FBQztRQUNSLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyJ9