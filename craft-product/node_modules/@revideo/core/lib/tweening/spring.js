import { decorate, threadable } from '../decorators';
import { useLogger, useThread } from '../utils';
decorate(spring, threadable());
export function* spring(spring, from, to, settleToleranceOrOnProgress, onProgressOrOnEnd, onEnd) {
    const settleTolerance = typeof settleToleranceOrOnProgress === 'number'
        ? settleToleranceOrOnProgress
        : 0.001;
    onEnd =
        typeof settleToleranceOrOnProgress === 'number' ? onEnd : onProgressOrOnEnd;
    const onProgress = (value, time) => {
        if (typeof settleToleranceOrOnProgress === 'function') {
            settleToleranceOrOnProgress(value, time);
        }
        else if (typeof onProgressOrOnEnd === 'function') {
            onProgressOrOnEnd(value, time);
        }
    };
    spring = spring ?? {
        mass: 0.05,
        stiffness: 10,
        damping: 0.5,
    };
    if (spring.mass <= 0) {
        useLogger().error(new Error('Spring mass must be greater than 0.'));
        return;
    }
    if (spring.stiffness < 0) {
        useLogger().error(new Error('Spring stiffness must be greater or equal to 0.'));
        return;
    }
    if (spring.damping < 0) {
        useLogger().error(new Error('Spring damping must be greater or equal to 0.'));
        return;
    }
    const thread = useThread();
    let position = from;
    let velocity = spring.initialVelocity ?? 0;
    const update = (dt) => {
        if (spring === null) {
            return;
        }
        const positionDelta = position - to;
        // Using hooks law: F=-kx; with k being the spring constant and x the offset
        // to the settling position
        const force = -spring.stiffness * positionDelta - spring.damping * velocity;
        // Update the velocity based on the given timestep
        velocity += (force / spring.mass) * dt;
        position += velocity * dt;
    };
    // Set simulation constant framerate
    const simulationFrames = 120;
    // Calculate a timestep based on on the simulation framerate
    const timeStep = 1 / simulationFrames;
    onProgress(from, 0);
    const startTime = thread.time();
    let simulationTime = startTime;
    let settled = false;
    while (!settled) {
        while (simulationTime < thread.fixed) {
            const difference = thread.fixed - simulationTime;
            if (timeStep > difference) {
                update(difference);
                simulationTime = thread.fixed;
            }
            else {
                update(timeStep);
                simulationTime += timeStep;
            }
            // Perform the check during every iteration:
            if (Math.abs(to - position) < settleTolerance &&
                Math.abs(velocity) < settleTolerance) {
                // Set the thread time to simulation time:
                thread.time(simulationTime);
                settled = true;
                // Break out when settled
                break;
            }
        }
        // Only yield if we haven't settled yet.
        if (!settled) {
            onProgress(position, thread.fixed - startTime);
            yield;
        }
    }
    onProgress(to, thread.fixed - startTime);
    onEnd?.(to, thread.fixed - startTime);
}
export function makeSpring(mass, stiffness, damping, initialVelocity) {
    return {
        mass,
        stiffness,
        damping,
        initialVelocity,
    };
}
export const BeatSpring = makeSpring(0.13, 5.7, 1.2, 10.0);
export const PlopSpring = makeSpring(0.2, 20.0, 0.68, 0.0);
export const BounceSpring = makeSpring(0.08, 4.75, 0.05, 0.0);
export const SwingSpring = makeSpring(0.39, 19.85, 2.82, 0.0);
export const JumpSpring = makeSpring(0.04, 10.0, 0.7, 8.0);
export const StrikeSpring = makeSpring(0.03, 20.0, 0.9, 4.8);
export const SmoothSpring = makeSpring(0.16, 15.35, 1.88, 0.0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ByaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R3ZWVuaW5nL3NwcmluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUk5QyxRQUFRLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFrQi9CLE1BQU0sU0FBUyxDQUFDLENBQUMsTUFBTSxDQUNyQixNQUFxQixFQUNyQixJQUFZLEVBQ1osRUFBVSxFQUNWLDJCQUFzRCxFQUN0RCxpQkFBb0MsRUFDcEMsS0FBd0I7SUFFeEIsTUFBTSxlQUFlLEdBQ25CLE9BQU8sMkJBQTJCLEtBQUssUUFBUTtRQUM3QyxDQUFDLENBQUMsMkJBQTJCO1FBQzdCLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFFWixLQUFLO1FBQ0gsT0FBTywyQkFBMkIsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7SUFFOUUsTUFBTSxVQUFVLEdBQXFCLENBQUMsS0FBYSxFQUFFLElBQVksRUFBRSxFQUFFO1FBQ25FLElBQUksT0FBTywyQkFBMkIsS0FBSyxVQUFVLEVBQUUsQ0FBQztZQUN0RCwyQkFBMkIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQzthQUFNLElBQUksT0FBTyxpQkFBaUIsS0FBSyxVQUFVLEVBQUUsQ0FBQztZQUNuRCxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakMsQ0FBQztJQUNILENBQUMsQ0FBQztJQUVGLE1BQU0sR0FBRyxNQUFNLElBQUk7UUFDakIsSUFBSSxFQUFFLElBQUk7UUFDVixTQUFTLEVBQUUsRUFBRTtRQUNiLE9BQU8sRUFBRSxHQUFHO0tBQ2IsQ0FBQztJQUVG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