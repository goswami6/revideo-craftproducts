import { map } from '../tweening';
import { SignalContext } from './SignalContext';
import { isReactive, modify } from './utils';
export class CompoundSignalContext extends SignalContext {
    constructor(entries, parser, initial, interpolation, owner = undefined, extensions = {}) {
        var _a;
        super(undefined, interpolation, owner, parser, extensions);
        this.entries = entries;
        this.signals = [];
        this.parser = parser;
        for (const entry of entries) {
            let key;
            let signal;
            if (Array.isArray(entry)) {
                [key, signal] = entry;
                (_a = signal.context).owner ?? (_a.owner = this);
            }
            else {
                key = entry;
                signal = new SignalContext(modify(initial, value => parser(value)[entry]), map, owner ?? this.invokable).toSignal();
            }
            this.signals.push([key, signal]);
            Object.defineProperty(this.invokable, key, { value: signal });
        }
    }
    toSignal() {
        return this.invokable;
    }
    parse(value) {
        return this.parser(value);
    }
    getter() {
        return this.parse((Object.fromEntries(this.signals.map(([key, property]) => [key, property()]))));
    }
    setter(value) {
        if (isReactive(value)) {
            for (const [key, property] of this.signals) {
                property(() => this.parser(value())[key]);
            }
        }
        else {
            const parsed = this.parse(value);
            for (const [key, property] of this.signals) {
                property(parsed[key]);
            }
        }
        return this.owner;
    }
    reset() {
        for (const [, signal] of this.signals) {
            signal.reset();
        }
        return this.owner;
    }
    save() {
        for (const [, signal] of this.signals) {
            signal.save();
        }
        return this.owner;
    }
    isInitial() {
        for (const [, signal] of this.signals) {
            if (!signal.isInitial()) {
                return false;
            }
        }
        return true;
    }
    raw() {
        return Object.fromEntries(this.signals.map(([key, property]) => [key, property.context.raw()]));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcG91bmRTaWduYWxDb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NpZ25hbHMvQ29tcG91bmRTaWduYWxDb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0IsR0FBRyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3ZELE9BQU8sRUFBUyxhQUFhLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUV0RCxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLFNBQVMsQ0FBQztBQWtCM0MsTUFBTSxPQUFPLHFCQUtYLFNBQVEsYUFBMkM7SUFHbkQsWUFDbUIsT0FHZCxFQUNILE1BQXVDLEVBQ3ZDLE9BQWtDLEVBQ2xDLGFBQTRDLEVBQzVDLFFBQWtDLFNBQVUsRUFDNUMsYUFBOEQsRUFBRTs7UUFFaEUsS0FBSyxDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQVYxQyxZQUFPLEdBQVAsT0FBTyxDQUdyQjtRQU5XLFlBQU8sR0FBK0MsRUFBRSxDQUFDO1FBY3ZFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXJCLEtBQUssTUFBTSxLQUFLLElBQUksT0FBTyxFQUFFLENBQUM7WUFDNUIsSUFBSSxHQUFpQixDQUFDO1lBQ3RCLElBQUksTUFBZ0MsQ0FBQztZQUNyQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDekIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUN0QixNQUFDLE1BQU0sQ0FBQyxPQUFlLEVBQUMsS0FBSyxRQUFMLEtBQUssR0FBSyxJQUFJLEVBQUM7WUFDekMsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLEdBQUcsR0FBRyxLQUFLLENBQUM7Z0JBQ1osTUFBTSxHQUFHLElBQUksYUFBYSxDQUN4QixNQUFNLENBQUMsT0FBTyxF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