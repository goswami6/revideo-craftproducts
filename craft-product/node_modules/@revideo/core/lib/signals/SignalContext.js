import { run, waitFor } from '../flow';
import { easeInOutCubic, tween, } from '../tweening';
import { errorToLog, useLogger } from '../utils';
import { DependencyContext } from './DependencyContext';
import { DEFAULT } from './symbols';
import { isReactive, unwrap } from './utils';
export class SignalContext extends DependencyContext {
    constructor(initial, interpolation, owner = undefined, parser = value => value, extensions = {}) {
        super(owner);
        this.initial = initial;
        this.interpolation = interpolation;
        this.parser = parser;
        this.tweening = false;
        Object.defineProperty(this.invokable, 'reset', {
            value: this.reset.bind(this),
        });
        Object.defineProperty(this.invokable, 'save', {
            value: this.save.bind(this),
        });
        Object.defineProperty(this.invokable, 'isInitial', {
            value: this.isInitial.bind(this),
        });
        if (this.initial !== undefined) {
            this.current = this.initial;
            this.markDirty();
            if (!isReactive(this.initial)) {
                this.last = this.parse(this.initial);
            }
        }
        this.extensions = {
            getter: this.getter.bind(this),
            setter: this.setter.bind(this),
            tweener: this.tweener.bind(this),
            ...extensions,
        };
    }
    toSignal() {
        return this.invokable;
    }
    parse(value) {
        return this.parser(value);
    }
    set(value) {
        this.extensions.setter(value);
        return this.owner;
    }
    setter(value) {
        if (value === DEFAULT) {
            value = this.initial;
        }
        if (this.current === value) {
            return this.owner;
        }
        this.current = value;
        this.markDirty();
        this.clearDependencies();
        if (!isReactive(value)) {
            this.last = this.parse(value);
        }
        return this.owner;
    }
    get() {
        return this.extensions.getter();
    }
    getter() {
        if (this.event.isRaised() && isReactive(this.current)) {
            this.clearDependencies();
            this.startCollecting();
            try {
                this.last = this.parse(this.current());
            }
            catch (e) {
                useLogger().error({
                    ...errorToLog(e),
                    inspect: this.owner?.key,
                });
            }
            this.finishCollecting();
        }
        this.event.reset();
        this.collect();
        return this.last;
    }
    invoke(value, duration, timingFunction = easeInOutCubic, interpolationFunction = this.interpolation) {
        if (value === undefined) {
            return this.get();
        }
        if (duration === undefined) {
            return this.set(value);
        }
        const queue = this.createQueue(timingFunction, interpolationFunction);
        return queue.to(value, duration);
    }
    createQueue(defaultTimingFunction, defaultInterpolationFunction) {
        const initial = this.get();
        const queue = [];
        const task = run('animation chain', function* animate() {
            while (queue.length > 0) {
                yield* queue.shift();
            }
        });
        task.to = (value, duration, timingFunction = defaultTimingFunction, interpolationFunction = defaultInterpolationFunction) => {
            defaultTimingFunction = timingFunction;
            defaultInterpolationFunction = interpolationFunction;
            queue.push(this.tween(value, duration, timingFunction, interpolationFunction));
            return task;
        };
        task.back = (time, timingFunction = defaultTimingFunction, interpolationFunction = defaultInterpolationFunction) => {
            defaultTimingFunction = timingFunction;
            defaultInterpolationFunction = interpolationFunction;
            queue.push(this.tween(initial, time, defaultTimingFunction, defaultInterpolationFunction));
            return task;
        };
        task.wait = (duration) => {
            queue.push(waitFor(duration));
            return task;
        };
        task.run = (generator) => {
            queue.push(generator);
            return task;
        };
        task.do = (callback) => {
            queue.push(run(function* () {
                callback();
            }));
            return task;
        };
        return task;
    }
    *tween(value, duration, timingFunction, interpolationFunction) {
        if (value === DEFAULT) {
            value = this.initial;
        }
        this.tweening = true;
        yield* this.extensions.tweener(value, duration, timingFunction, interpolationFunction);
        this.set(value);
        this.tweening = false;
    }
    *tweener(value, duration, timingFunction, interpolationFunction) {
        const from = this.get();
        yield* tween(duration, v => {
            this.set(interpolationFunction(from, this.parse(unwrap(value)), timingFunction(v)));
        });
    }
    dispose() {
        super.dispose();
        this.initial = undefined;
        this.current = undefined;
        this.last = undefined;
    }
    /**
     * Reset the signal to its initial value (if one has been set).
     *
     * @example
     * ```ts
     * const signal = createSignal(7);
     *
     * signal.reset();
     * // same as:
     * signal(7);
     * ```
     */
    reset() {
        if (this.initial !== undefined) {
            this.set(this.initial);
        }
        return this.owner;
    }
    /**
     * Compute the current value of the signal and immediately set it.
     *
     * @remarks
     * This method can be used to stop the signal from updating while keeping its
     * current value.
     *
     * @example
     * ```ts
     * signal.save();
     * // same as:
     * signal(signal());
     * ```
     */
    save() {
        return this.set(this.get());
    }
    /**
     * Check if the signal is currently using its initial value.
     *
     * @example
     * ```ts
     *
     * const signal = createSignal(0);
     * signal.isInitial(); // true
     *
     * signal(5);
     * signal.isInitial(); // false
     *
     * signal(DEFAULT);
     * signal.isInitial(); // true
     * ```
     */
    isInitial() {
        this.collect();
        return this.current === this.initial;
    }
    /**
     * Get the initial value of this signal.
     */
    getInitial() {
        return this.initial;
    }
    /**
     * Get the raw value of this signal.
     *
     * @remarks
     * If the signal was provided with a factory function, the function itself
     * will be returned, without invoking it.
     *
     * This method can be used to create copies of signals.
     *
     * @example
     * ```ts
     * const a = createSignal(2);
     * const b = createSignal(() => a);
     * // b() == 2
     *
     * const bClone = createSignal(b.raw());
     * // bClone() == 2
     *
     * a(4);
     * // b() == 4
     * // bClone() == 4
     * ```
     */
    raw() {
        return this.current;
    }
    /**
     * Is the signal undergoing a tween?
     */
    isTweening() {
        return this.tweening;
    }
}
//# sourceMappingURL=data:application/json;base64,