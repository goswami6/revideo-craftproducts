/**
 * Utility to redirect remote sources via Proxy
 *
 * This utility is used to rewrite a request to be routed through
 * the Proxy instead.
 */
import { useLogger } from './useScene';
/**
 * Route the given url through a local proxy.
 *
 * @example
 * This rewrites a remote url like `https://via.placeholder.com/300.png/09f/fff`
 * into a URI-Component-Encoded string like
 * `/cors-proxy/https%3A%2F%2Fvia.placeholder.com%2F300.png%2F09f%2Ffff`
 */
export function viaProxy(url) {
    if (!isProxyEnabled()) {
        // Proxy is disabled, so we just pass as-is.
        return url;
    }
    if (url.startsWith('/cors-proxy/')) {
        // Already proxied, return as-is
        return url;
    }
    // window.location.hostname is being passed here to ensure that
    // this does not throw an Error for same-origin requests
    // e.g. /some/image -> localhost:9000/some/image
    const selfUrl = new URL(window.location.toString());
    // inside a try-catch in case the URL cannot be understood
    try {
        const expandedUrl = new URL(url, selfUrl);
        if (!expandedUrl.protocol.startsWith('http')) {
            // this is probably some embedded image (e.g. image/png;base64).
            // don't touch and pass as is
            return url;
        }
        if (selfUrl.host === expandedUrl.host) {
            // This is a request to a "local" resource.
            // No need to rewrite
            return url;
        }
        // Check if the host matches the Allow List.
        // if not, no rewrite takes place.
        // will fail in the Editor if the
        // remote host does not accept anonymous
        if (!isInsideAllowList(expandedUrl.host)) {
            return url;
        }
    }
    catch (_) {
        // in case of error just silently pass as-is
        return url;
    }
    // Everything else is a "remote" resource and requires a rewrite.
    return `/cors-proxy/${encodeURIComponent(url)}`;
}
/**
 * Check the provided host is allowed to be routed
 * to the Proxy.
 */
function isInsideAllowList(host) {
    const allowList = getAllowList();
    if (allowList.length === 0) {
        // Allow List defaults to allow all if empty
        return true;
    }
    for (const entry of allowList) {
        if (entry.toLowerCase().trim() === host) {
            return true;
        }
    }
    return false;
}
/**
 * Check if the proxy is enabled via the plugin by checking
 * for `import.meta.env.VITE_MC_PROXY_ENABLED`
 *
 * @remarks The value can either be 'true' of 'false'
 * (as strings) if present, or be undefined if not run
 * from a vite context or run without the MC Plugin.
 */
export function isProxyEnabled() {
    if (import.meta.env) {
        return import.meta.env.VITE_MC_PROXY_ENABLED === 'true';
    }
    return false;
}
/**
 * Cached value so getAllowList does not
 * try to parse the Env var on every call,
 * spamming the console in the process
 */
let AllowListCache = undefined;
/**
 * Return the list of allowed hosts
 * from the Plugin Config
 */
function getAllowList() {
    // Condition should get optimized away for Prod
    if (import.meta.env.VITEST !== 'true') {
        if (AllowListCache) {
            return [...AllowListCache];
        }
    }
    // Inline function gets immediately invoked
    // and the result stored in getAllowListCache.
    // The cached value is used on subsequent requests.
    const result = (function () {
        if (!isProxyEnabled() || !import.meta.env) {
            return [];
        }
        // This value is encoded as a JSON String.
        const valueJson = import.meta.env.VITE_MC_PROXY_ALLOW_LIST ?? '[]';
        const parsedJson = JSON.parse(valueJson);
        // Do an additional check that only strings are present,
        // create a warning and ignore the value
        if (!Array.isArray(parsedJson)) {
            useLogger().error('Parsed Allow List expected to be an Array, but is ' +
                typeof parsedJson);
        }
        const validatedEntries = [];
        for (const entry of parsedJson) {
            if (typeof entry !== 'string') {
                useLogger().warn('Unexpected Value in Allow List: ' +
                    entry +
                    '. Expected a String. Skipping.');
                continue;
            }
            validatedEntries.push(entry);
        }
        return validatedEntries;
    })();
    AllowListCache = result;
    return [...AllowListCache];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveHlVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wcm94eVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztHQUtHO0FBRUgsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUVyQzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FBQyxHQUFXO0lBQ2xDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDO1FBQ3RCLDRDQUE0QztRQUM1QyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztRQUNuQyxnQ0FBZ0M7UUFDaEMsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQsK0RBQStEO0lBQy9ELHdEQUF3RDtJQUN4RCxnREFBZ0Q7SUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELDBEQUEwRDtJQUMxRCxJQUFJLENBQUM7UUFDSCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDN0MsZ0VBQWdFO1lBQ2hFLDZCQUE2QjtZQUM3QixPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUM7UUFDRCxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3RDLDJDQUEyQztZQUMzQyxxQkFBcUI7WUFDckIsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDO1FBRUQsNENBQTRDO1FBQzVDLGtDQUFrQztRQUNsQyxpQ0FBaUM7UUFDakMsd0NBQXdDO1FBQ3hDLElBQUksQ0FBQyxp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