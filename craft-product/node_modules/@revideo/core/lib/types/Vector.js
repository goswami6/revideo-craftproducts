import { CompoundSignalContext, } from '../signals';
import { arcLerp } from '../tweening';
import { clamp, map } from '../tweening/interpolationFunctions';
import { DEG2RAD, RAD2DEG } from '../utils';
import { Matrix2D } from './Matrix2D';
import { Direction, Origin } from './Origin';
import { EPSILON } from './Type';
/**
 * Represents a two-dimensional vector.
 */
export class Vector2 {
    static createSignal(initial, interpolation = Vector2.lerp, owner) {
        return new CompoundSignalContext(['x', 'y'], (value) => new Vector2(value), initial, interpolation, owner).toSignal();
    }
    static lerp(from, to, value) {
        let valueX;
        let valueY;
        if (typeof value === 'number') {
            valueX = valueY = value;
        }
        else {
            valueX = value.x;
            valueY = value.y;
        }
        return new Vector2(map(from.x, to.x, valueX), map(from.y, to.y, valueY));
    }
    static arcLerp(from, to, value, reverse = false, ratio) {
        ratio ?? (ratio = from.sub(to).ctg);
        return Vector2.lerp(from, to, arcLerp(value, reverse, ratio));
    }
    static createArcLerp(reverse, ratio) {
        return (from, to, value) => Vector2.arcLerp(from, to, value, reverse, ratio);
    }
    /**
     * Interpolates between two vectors on the polar plane by interpolating
     * the angles and magnitudes of the vectors individually.
     *
     * @param from - The starting vector.
     * @param to - The target vector.
     * @param value - The t-value of the interpolation.
     * @param counterclockwise - Whether the vector should get rotated
     *                           counterclockwise. Defaults to `false`.
     * @param origin - The center of rotation. Defaults to the origin.
     *
     * @remarks
     * This function is useful when used in conjunction with {@link rotate} to
     * animate an object's position on a circular arc (see examples).
     *
     * @example
     * Animating an object in a circle around the origin
     * ```tsx
     * circle().position(
     *   circle().position().rotate(180),
     *   1,
     *   easeInOutCubic,
     *   Vector2.polarLerp
     * );
     * ```
     * @example
     * Rotating an object around the point `[-200, 100]`
     * ```ts
     * circle().position(
     *   circle().position().rotate(180, [-200, 100]),
     *   1,
     *   easeInOutCubic,
     *   Vector2.createPolarLerp(false, [-200, 100]),
     * );
     * ```
     * @example
     * Rotating an object counterclockwise around the origin
     * ```ts
     * circle().position(
     *   circle().position().rotate(180),
     *   1,
     *   easeInOutCubic,
     *   Vector2.createPolarLerp(true),
     * );
     * ```
     */
    static polarLerp(from, to, value, counterclockwise = false, origin = Vector2.zero) {
        from = from.sub(origin);
        to = to.sub(origin);
        const fromAngle = from.degrees;
        let toAngle = to.degrees;
        const isCounterclockwise = fromAngle > toAngle;
        if (isCounterclockwise !== counterclockwise) {
            toAngle = toAngle + (counterclockwise ? -360 : 360);
        }
        const angle = map(fromAngle, toAngle, value) * DEG2RAD;
        const magnitude = map(from.magnitude, to.magnitude, value);
        return new Vector2(magnitude * Math.cos(angle) + origin.x, magnitude * Math.sin(angle) + origin.y);
    }
    /**
     * Helper function to create a {@link Vector2.polarLerp} interpolation
     * function with additional parameters.
     *
     * @param counterclockwise - Whether the point should get rotated
     *                           counterclockwise.
     * @param center - The center of rotation. Defaults to the origin.
     */
    static createPolarLerp(counterclockwise = false, center = Vector2.zero) {
        return (from, to, value) => Vector2.polarLerp(from, to, value, counterclockwise, new Vector2(center));
    }
    static fromOrigin(origin) {
        const position = new Vector2();
        if (origin === Origin.Middle) {
            return position;
        }
        if (origin & Direction.Left) {
            position.x = -1;
        }
        else if (origin & Direction.Right) {
            position.x = 1;
        }
        if (origin & Direction.Top) {
            position.y = -1;
        }
        else if (origin & Direction.Bottom) {
            position.y = 1;
        }
        return position;
    }
    static fromScalar(value) {
        return new Vector2(value, value);
    }
    static fromRadians(radians) {
        return new Vector2(Math.cos(radians), Math.sin(radians));
    }
    static fromDegrees(degrees) {
        return Vector2.fromRadians(degrees * DEG2RAD);
    }
    /**
     * Return the angle in radians between the vector described by x and y and the
     * positive x-axis.
     *
     * @param x - The x component of the vector.
     * @param y - The y component of the vector.
     */
    static radians(x, y) {
        return Math.atan2(y, x);
    }
    /**
     * Return the angle in degrees between the vector described by x and y and the
     * positive x-axis.
     *
     * @param x - The x component of the vector.
     * @param y - The y component of the vector.
     *
     * @remarks
     * The returned angle will be between -180 and 180 degrees.
     */
    static degrees(x, y) {
        return Vector2.radians(x, y) * RAD2DEG;
    }
    static magnitude(x, y) {
        return Math.sqrt(x * x + y * y);
    }
    static squaredMagnitude(x, y) {
        return x * x + y * y;
    }
    static angleBetween(u, v) {
        return (Math.acos(clamp(-1, 1, u.dot(v) / (u.magnitude * v.magnitude))) *
            (u.cross(v) >= 0 ? 1 : -1));
    }
    get width() {
        return this.x;
    }
    set width(value) {
        this.x = value;
    }
    get height() {
        return this.y;
    }
    set height(value) {
        this.y = value;
    }
    get magnitude() {
        return Vector2.magnitude(this.x, this.y);
    }
    get squaredMagnitude() {
        return Vector2.squaredMagnitude(this.x, this.y);
    }
    get normalized() {
        return this.scale(1 / Vector2.magnitude(this.x, this.y));
    }
    get safe() {
        return new Vector2(isNaN(this.x) ? 0 : this.x, isNaN(this.y) ? 0 : this.y);
    }
    get flipped() {
        return new Vector2(-this.x, -this.y);
    }
    get floored() {
        return new Vector2(Math.floor(this.x), Math.floor(this.y));
    }
    get perpendicular() {
        return new Vector2(this.y, -this.x);
    }
    /**
     * Return the angle in radians between the vector and the positive x-axis.
     */
    get radians() {
        return Vector2.radians(this.x, this.y);
    }
    /**
     * Return the angle in degrees between the vector and the positive x-axis.
     *
     * @remarks
     * The returned angle will be between -180 and 180 degrees.
     */
    get degrees() {
        return Vector2.degrees(this.x, this.y);
    }
    get ctg() {
        return this.x / this.y;
    }
    constructor(one, two) {
        this.x = 0;
        this.y = 0;
        if (one === undefined || one === null) {
            return;
        }
        if (typeof one !== 'object') {
            this.x = one;
            this.y = two ?? one;
            return;
        }
        if (Array.isArray(one)) {
            this.x = one[0];
            this.y = one[1];
            return;
        }
        if ('width' in one) {
            this.x = one.width;
            this.y = one.height;
            return;
        }
        this.x = one.x;
        this.y = one.y;
    }
    lerp(to, value) {
        return Vector2.lerp(this, to, value);
    }
    getOriginOffset(origin) {
        const offset = Vector2.fromOrigin(origin);
        offset.x *= this.x / 2;
        offset.y *= this.y / 2;
        return offset;
    }
    scale(value) {
        return new Vector2(this.x * value, this.y * value);
    }
    transformAsPoint(matrix) {
        const m = new Matrix2D(matrix);
        return new Vector2(this.x * m.scaleX + this.y * m.skewY + m.translateX, this.x * m.skewX + this.y * m.scaleY + m.translateY);
    }
    transform(matrix) {
        const m = new Matrix2D(matrix);
        return new Vector2(this.x * m.scaleX + this.y * m.skewY, this.x * m.skewX + this.y * m.scaleY);
    }
    mul(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x * vector.x, this.y * vector.y);
    }
    div(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x / vector.x, this.y / vector.y);
    }
    add(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x + vector.x, this.y + vector.y);
    }
    sub(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x - vector.x, this.y - vector.y);
    }
    dot(possibleVector) {
        const vector = new Vector2(possibleVector);
        return this.x * vector.x + this.y * vector.y;
    }
    cross(possibleVector) {
        const vector = new Vector2(possibleVector);
        return this.x * vector.y - this.y * vector.x;
    }
    mod(possibleVector) {
        const vector = new Vector2(possibleVector);
        return new Vector2(this.x % vector.x, this.y % vector.y);
    }
    /**
     * Rotates the vector around a point by the provided angle.
     *
     * @param angle - The angle by which to rotate in degrees.
     * @param center - The center of rotation. Defaults to the origin.
     */
    rotate(angle, center = Vector2.zero) {
        const originVector = new Vector2(center);
        const matrix = Matrix2D.fromTranslation(originVector)
            .rotate(angle)
            .translate(originVector.flipped);
        return this.transformAsPoint(matrix);
    }
    addX(value) {
        return new Vector2(this.x + value, this.y);
    }
    addY(value) {
        return new Vector2(this.x, this.y + value);
    }
    toSymbol() {
        return Vector2.symbol;
    }
    toString() {
        return `Vector2(${this.x}, ${this.y})`;
    }
    toUniform(gl, location) {
        gl.uniform2f(location, this.x, this.y);
    }
    serialize() {
        return { x: this.x, y: this.y };
    }
    /**
     * Check if two vectors are exactly equal to each other.
     *
     * @remarks
     * If you need to compensate for floating point inaccuracies, use the
     * {@link equals} method, instead.
     *
     * @param other - The vector to compare.
     */
    exactlyEquals(other) {
        return this.x === other.x && this.y === other.y;
    }
    /**
     * Check if two vectors are equal to each other.
     *
     * @remarks
     * This method allows passing an allowed error margin when comparing vectors
     * to compensate for floating point inaccuracies. To check if two vectors are
     * exactly equal, use the {@link exactlyEquals} method, instead.
     *
     * @param other - The vector to compare.
     * @param threshold - The allowed error threshold when comparing the vectors.
     */
    equals(other, threshold = EPSILON) {
        return (Math.abs(this.x - other.x) <= threshold + Number.EPSILON &&
            Math.abs(this.y - other.y) <= threshold + Number.EPSILON);
    }
}
Vector2.symbol = Symbol.for('@revideo/core/types/Vector2');
Vector2.zero = new Vector2();
Vector2.one = new Vector2(1, 1);
Vector2.right = new Vector2(1, 0);
Vector2.left = new Vector2(-1, 0);
Vector2.up = new Vector2(0, 1);
Vector2.down = new Vector2(0, -1);
/**
 * A constant equal to `Vector2(0, -1)`
 */
Vector2.top = new Vector2(0, -1);
/**
 * A constant equal to `Vector2(0, 1)`
 */
Vector2.bottom = new Vector2(0, 1);
/**
 * A constant equal to `Vector2(-1, -1)`
 */
Vector2.topLeft = new Vector2(-1, -1);
/**
 * A constant equal to `Vector2(1, -1)`
 */
Vector2.topRight = new Vector2(1, -1);
/**
 * A constant equal to `Vector2(-1, 1)`
 */
Vector2.bottomLeft = new Vector2(-1, 1);
/**
 * A constant equal to `Vector2(1, 1)`
 */
Vector2.bottomRight = new Vector2(1, 1);
//# sourceMappingURL=data:application/json;base64,