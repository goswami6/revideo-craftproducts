import { Color, mix } from 'chroma-js';
import { SignalContext } from '../signals';
// iife prevents tree shaking from stripping our methods.
const ExtendedColor = (() => {
    Color.symbol = Color.prototype.symbol = Symbol.for('@revideo/core/types/Color');
    Color.lerp = Color.prototype.lerp = (from, to, value, colorSpace = 'lch') => {
        if (typeof from === 'string') {
            from = new Color(from);
        }
        if (typeof to === 'string') {
            to = new Color(to);
        }
        const fromIsColor = from instanceof Color;
        const toIsColor = to instanceof Color;
        if (!fromIsColor) {
            from = toIsColor ? to.alpha(0) : new Color('rgba(0, 0, 0, 0)');
        }
        if (!toIsColor) {
            to = fromIsColor
                ? from.alpha(0)
                : new Color('rgba(0, 0, 0, 0)');
        }
        return mix(from, to, value, colorSpace);
    };
    Color.createLerp = Color.prototype.createLerp =
        (colorSpace) => (from, to, value) => Color.lerp(from, to, value, colorSpace);
    Color.createSignal = (initial, interpolation = Color.lerp) => {
        return new SignalContext(initial, interpolation, undefined, value => new Color(value)).toSignal();
    };
    Color.prototype.toSymbol = () => {
        return Color.symbol;
    };
    Color.prototype.toUniform = function (gl, location) {
        gl.uniform4fv(location, this.gl());
    };
    Color.prototype.serialize = function () {
        return this.css();
    };
    Color.prototype.lerp = function (to, value, colorSpace) {
        return Color.lerp(this, to, value, colorSpace);
    };
    return Color;
})();
export { ExtendedColor as Color };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdHlwZXMvQ29sb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBaUMsR0FBRyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BFLE9BQU8sRUFBUyxhQUFhLEVBQWMsTUFBTSxZQUFZLENBQUM7QUFzRDlELHlEQUF5RDtBQUN6RCxNQUFNLGFBQWEsR0FBaUIsQ0FBQyxHQUFHLEVBQUU7SUFDeEMsS0FBSyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUNoRCwyQkFBMkIsQ0FDNUIsQ0FBQztJQUVGLEtBQUssQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FDbEMsSUFBMkIsRUFDM0IsRUFBeUIsRUFDekIsS0FBYSxFQUNiLGFBQWdDLEtBQUssRUFDckMsRUFBRTtRQUNGLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDN0IsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFDRCxJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzNCLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixDQUFDO1FBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxZQUFZLEtBQUssQ0FBQztRQUMxQyxNQUFNLFNBQVMsR0FBRyxFQUFFLFlBQVksS0FBSyxDQUFDO1FBRXRDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBRSxFQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzVFLENBQUM7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDZixFQUFFLEdBQUcsV0FBVztnQkFDZCxDQUFDLENBQUUsSUFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFhLEVBQUUsRUFBVyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUM7SUFFRixLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVTtRQUMzQyxDQUFDLFVBQTZCLEVBQUUsRUFBRSxDQUNsQyxDQUFDLElBQTJCLEVBQUUsRUFBeUIsRUFBRSxLQUFhLEVBQUUsRUFBRSxDQUN4RSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRTVDLEtBQUssQ0FBQyxZQUFZLEdBQUcsQ0FDbkIsT0FBb0MsRUFDcEMsZ0JBQThDLEtBQUssQ0FBQyxJQUFJLEVBQ3JDLEVBQUU7UUFDckIsT0FBTyxJQUFJLGFBQWEsQ0FDdEIsT0FBTyxFQUNQLGFBQWEsRUFDYixTQUFTLEVBQ1QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FDMUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNmLENBQUMsQ0FBQztJQUVGLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRTtRQUM5QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUM7SUFDdEIsQ0FBQyxDQUFDO0lBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsVUFFMUIsRUFBMEIsRUFDMUIsUUFBOEI7UUFFOUIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDO0lBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUc7UUFDMUIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0lBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFFckIsRUFBUyxFQUNULEtBQWEsRUFDYixVQUF1QjtRQUV2QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDO0lBRUYsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMsRUFBRSxDQUFDO0FBRUwsT0FBTyxFQUFDLGFBQWEsSUFBSSxLQUFLLEVBQUMsQ0FBQyJ9