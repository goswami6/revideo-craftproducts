import { EventDispatcher, ValueDispatcher } from '../events';
import { ReadOnlyTimeEvents } from '../scenes/timeEvents';
import { clampRemap } from '../tweening';
import { Vector2 } from '../types';
import { Semaphore } from '../utils';
import { PlaybackManager, PlaybackState } from './PlaybackManager';
import { PlaybackStatus } from './PlaybackStatus';
import { SharedWebGLContext } from './SharedWebGLContext';
import { Stage } from './Stage';
import { TimeEstimator } from './TimeEstimator';
export var RendererState;
(function (RendererState) {
    RendererState[RendererState["Initial"] = 0] = "Initial";
    RendererState[RendererState["Working"] = 1] = "Working";
    RendererState[RendererState["Aborting"] = 2] = "Aborting";
})(RendererState || (RendererState = {}));
export var RendererResult;
(function (RendererResult) {
    RendererResult[RendererResult["Success"] = 0] = "Success";
    RendererResult[RendererResult["Error"] = 1] = "Error";
    RendererResult[RendererResult["Aborted"] = 2] = "Aborted";
})(RendererResult || (RendererResult = {}));
/**
 * The rendering logic used by the editor to export animations.
 *
 * @remarks
 * This class uses the `PlaybackManager` to render animations. In contrast to a
 * player, a renderer does not use an update loop. It plays through the
 * animation as fast as it can, occasionally pausing to keep the UI responsive.
 *
 * The actual exporting is outsourced to an {@link Exporter}.
 */
export class Renderer {
    get onStateChanged() {
        return this.state.subscribable;
    }
    get onFinished() {
        return this.finished.subscribable;
    }
    get onFrameChanged() {
        return this.frame.subscribable;
    }
    constructor(project) {
        this.project = project;
        this.state = new ValueDispatcher(RendererState.Initial);
        this.finished = new EventDispatcher();
        this.frame = new ValueDispatcher(0);
        this.stage = new Stage();
        this.estimator = new TimeEstimator();
        this.lock = new Semaphore();
        this.exporter = null;
        this.abortController = null;
        this.playback = new PlaybackManager();
        this.status = new PlaybackStatus(this.playback);
        this.sharedWebGLContext = new SharedWebGLContext(this.project.logger);
        const scenes = [];
        for (const description of project.scenes) {
            const scene = new description.klass({
                ...description,
                meta: description.meta.clone(),
                logger: this.project.logger,
                playback: this.status,
                size: new Vector2(1920, 1080),
                resolutionScale: 1,
                timeEventsClass: ReadOnlyTimeEvents,
                sharedWebGLContext: this.sharedWebGLContext,
                experimentalFeatures: project.experimentalFeatures,
            });
            scenes.push(scene);
        }
        this.playback.setup(scenes);
    }
    /**
     * Returns number of frames that a project will have.
     */
    async getNumberOfFrames(settings) {
        await this.lock.acquire();
        this.estimator.reset();
        this.state.current = RendererState.Working;
        await this.reloadScenes(settings);
        await this.playback.recalculate();
        await this.playback.reset();
        const frames = this.playback.duration;
        this.state.current = RendererState.Initial;
        this.sharedWebGLContext.dispose();
        this.lock.release();
        return frames;
    }
    frameToTime(frame) {
        return this.status.framesToSeconds(frame);
    }
    timeToFrame(second) {
        return this.status.secondsToFrames(second);
    }
    /**
     * Render the animation using the provided settings.
     *
     * @param settings - The rendering settings.
     */
    async render(settings) {
        if (this.state.current !== RendererState.Initial)
            return;
        await this.lock.acquire();
        this.estimator.reset();
        this.state.current = RendererState.Working;
        let result;
        try {
            this.abortController = new AbortController();
            result = await this.run(settings, this.abortController.signal);
        }
        catch (e) {
            this.project.logger.error(e);
            result = RendererResult.Error;
            if (this.exporter) {
                try {
                    await this.exporter.stop?.(result);
                }
                catch (_) {
                    // do nothing
                }
                this.exporter = null;
                throw Error(e.message);
            }
        }
        this.estimator.update(1);
        this.state.current = RendererState.Initial;
        this.finished.dispatch(result);
        this.sharedWebGLContext.dispose();
        this.lock.release();
    }
    /**
     * Abort the ongoing render process.
     */
    abort() {
        if (this.state.current !== RendererState.Working)
            return;
        this.abortController?.abort();
        this.state.current = RendererState.Aborting;
    }
    /**
     * Export an individual frame.
     *
     * @remarks
     * This method always uses the default `ImageExporter`.
     *
     * @param settings - The rendering settings.
     * @param time - The timestamp to export.
     */
    async renderFrame(settings, time) {
        await this.lock.acquire();
        try {
            const frame = this.status.secondsToFrames(time);
            this.stage.configure(settings);
            this.playback.fps = settings.fps;
            this.playback.state = PlaybackState.Rendering;
            await this.reloadScenes(settings);
            await this.playback.reset();
            await this.playback.seek(frame);
            await this.stage.render(this.playback.currentScene, this.playback.previousScene);
            if (import.meta.hot) {
                import.meta.hot.send('revideo:export', {
                    frame,
                    data: this.stage.finalBuffer.toDataURL('image/png'),
                    mimeType: 'image/png',
                    subDirectories: ['still', this.project.name],
                });
            }
        }
        catch (e) {
            this.project.logger.error(e);
        }
        this.lock.release();
    }
    async run(settings, signal) {
        const exporterClass = this.project.meta.rendering.exporter.exporters.find(exporter => exporter.id === settings.exporter.name);
        if (!exporterClass) {
            this.project.logger.error(`Could not find the "${settings.exporter.name}" exporter.`);
            return RendererResult.Error;
        }
        this.exporter = await exporterClass.create(this.project, settings);
        if (this.exporter.configuration) {
            settings = {
                ...settings,
                ...((await this.exporter.configuration()) ?? {}),
            };
        }
        this.stage.configure(settings);
        this.playback.fps = settings.fps;
        this.playback.state = PlaybackState.Rendering;
        const from = this.status.secondsToFrames(settings.range[0]);
        this.frame.current = from;
        await this.reloadScenes(settings);
        await this.playback.recalculate();
        if (signal.aborted)
            return RendererResult.Aborted;
        await this.playback.reset();
        if (signal.aborted)
            return RendererResult.Aborted;
        const to = Math.min(this.playback.duration, this.status.secondsToFrames(settings.range[1]));
        await this.playback.seek(from);
        if (signal.aborted)
            return RendererResult.Aborted;
        await this.exporter.start?.();
        let lastRefresh = performance.now();
        let result = RendererResult.Success;
        const mediaByFrames = await this.getMediaByFrames(settings);
        let generateAudioPromise;
        if (this.exporter && this.exporter.generateAudio) {
            generateAudioPromise = this.exporter.generateAudio(mediaByFrames, from, to);
        }
        await this.playback.seek(from);
        try {
            this.estimator.reset(1 / (to - from));
            await this.exportFrame(signal);
            this.estimator.update(clampRemap(from, to, 0, 1, this.playback.frame));
            this.estimator.reportProgress();
            if (signal.aborted) {
                result = RendererResult.Aborted;
            }
            else {
                let finished = false;
                while (!finished) {
                    await this.playback.progress();
                    this.estimator.update(clampRemap(from, to, 0, 1, this.playback.frame));
                    this.estimator.reportProgress();
                    if (performance.now() - lastRefresh > 1 / 30) {
                        lastRefresh = performance.now();
                        await new Promise(resolve => setTimeout(resolve, 0));
                    }
                    if (this.playback.finished || this.playback.frame >= to) {
                        finished = true;
                    }
                    if (signal.aborted) {
                        result = RendererResult.Aborted;
                        finished = true;
                    }
                    await this.exportFrame(signal);
                }
            }
        }
        catch (e) {
            this.project.logger.error(e);
            result = RendererResult.Error;
        }
        await this.exporter.stop?.(result);
        if (import.meta.hot) {
            import.meta.hot.send('revideo:render-finished', {});
        }
        // Only merge media when rendering images was actually successful.
        if (result === RendererResult.Success &&
            this.exporter &&
            this.exporter.mergeMedia &&
            generateAudioPromise) {
            try {
                await generateAudioPromise;
                await this.exporter.mergeMedia();
            }
            catch (e) {
                this.project.logger.error(e);
                result = RendererResult.Error;
            }
        }
        await this.exporter?.kill?.();
        this.exporter = null;
        return result;
    }
    async reloadScenes(settings) {
        for (let i = 0; i < this.project.scenes.length; i++) {
            const description = this.project.scenes[i];
            const scene = this.playback.onScenesRecalculated.current[i];
            scene.reload({
                config: description.onReplaced.current.config,
                size: settings.size,
                resolutionScale: settings.resolutionScale,
            });
            scene.meta.set(description.meta.get());
            scene.variables.updateSignals(this.project.variables ?? {});
        }
    }
    async exportFrame(signal) {
        this.frame.current = this.playback.frame;
        await this.stage.render(this.playback.currentScene, this.playback.previousScene);
        const sceneFrame = this.playback.frame - this.playback.currentScene.firstFrame;
        await this.exporter.handleFrame(this.stage.finalBuffer, this.playback.frame, sceneFrame, this.playback.currentScene.name, signal);
    }
    async getMediaByFrames(settings) {
        this.stage.configure(settings);
        this.playback.fps = settings.fps;
        this.playback.state = PlaybackState.Rendering;
        const from = this.status.secondsToFrames(settings.range[0]);
        this.frame.current = from;
        await this.reloadScenes(settings);
        await this.playback.recalculate();
        await this.playback.reset();
        const to = Math.min(this.playback.duration, this.status.secondsToFrames(settings.range[1]));
        await this.playback.seek(from);
        const mediaAssets = [];
        try {
            const currentMediaAssets = this.playback.currentScene.getMediaAssets();
            mediaAssets.push(currentMediaAssets);
            let finished = false;
            while (!finished) {
                await this.playback.progress();
                mediaAssets.push(this.playback.currentScene.getMediaAssets());
                if (this.playback.finished || this.playback.frame >= to) {
                    finished = true;
                }
            }
        }
        catch (e) {
            this.project.logger.error(e);
        }
        return mediaAssets;
    }
}
//# sourceMappingURL=data:application/json;base64,