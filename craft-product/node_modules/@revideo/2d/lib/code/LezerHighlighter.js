import { highlightTree } from '@lezer/highlight';
import { useLogger } from '@revideo/core';
import { defaultTokenize } from './CodeTokenizer';
export class LezerHighlighter {
    static registerParser(parser, dialect = '') {
        this.parserMap.set(dialect, parser);
    }
    constructor(style) {
        this.style = style;
        this.classLookup = new Map();
        for (const rule of this.style.module?.getRules().split('\n') ?? []) {
            const match = rule.match(LezerHighlighter.classRegex);
            if (!match) {
                continue;
            }
            const className = match[1];
            const color = match[2].trim();
            this.classLookup.set(className, color);
        }
    }
    initialize() {
        return true;
    }
    prepare(code, dialect) {
        const parser = LezerHighlighter.parserMap.get(dialect);
        if (!parser) {
            if (dialect !== '') {
                useLogger().warn(`No parser found for dialect: ${dialect}`);
            }
            return null;
        }
        const colorLookup = new Map();
        const tree = parser.parse(code);
        highlightTree(tree, this.style, (from, to, classes) => {
            const color = this.classLookup.get(classes);
            if (!color) {
                return;
            }
            const cursor = tree.cursorAt(from, 1);
            do {
                const id = this.getNodeId(cursor.node);
                colorLookup.set(id, color);
            } while (cursor.next() && cursor.to <= to);
        });
        return {
            tree,
            code,
            colorLookup,
        };
    }
    highlight(index, cache) {
        if (!cache) {
            return {
                color: null,
                skipAhead: 0,
            };
        }
        const node = cache.tree.resolveInner(index, 1);
        const id = this.getNodeId(node);
        const color = cache.colorLookup.get(id);
        if (color) {
            return {
                color,
                skipAhead: node.to - index,
            };
        }
        let skipAhead = 0;
        if (!node.firstChild) {
            skipAhead = node.to - index;
        }
        return {
            color: null,
            skipAhead,
        };
    }
    tokenize(code, dialect) {
        const parser = LezerHighlighter.parserMap.get(dialect);
        if (!parser) {
            if (dialect !== '') {
                useLogger().warn(`No parser found for dialect: ${dialect}`);
            }
            return defaultTokenize(code);
        }
        const tree = parser.parse(code);
        const cursor = tree.cursor();
        const tokens = [];
        let current = 0;
        do {
            if (!cursor.node.firstChild) {
                if (cursor.from > current) {
                    tokens.push(code.slice(current, cursor.from));
                }
                if (cursor.from < cursor.to) {
                    tokens.push(code.slice(cursor.from, cursor.to));
                }
                current = cursor.to;
            }
        } while (cursor.next());
        return tokens;
    }
    getNodeId(node) {
        if (!node.parent) {
            return -1;
        }
        // NOTE: They don't want us to know about this property.
        // We need a way to persistently identify nodes and this seems to work.
        // Perhaps it could break if the tree is edited? But we don't do that. Yet.
        return node.index;
    }
}
LezerHighlighter.parserMap = new Map();
LezerHighlighter.classRegex = /\.(\S+).*color:([^;]+)/;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGV6ZXJIaWdobGlnaHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY29kZS9MZXplckhpZ2hsaWdodGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXhDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQVFoRCxNQUFNLE9BQU8sZ0JBQWdCO0lBS3BCLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBYyxFQUFFLE9BQU8sR0FBRyxFQUFFO1FBQ3ZELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsWUFBb0MsS0FBcUI7UUFBckIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFOeEMsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztRQU92RCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztZQUNuRSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDWCxTQUFTO1lBQ1gsQ0FBQztZQUVELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUM7SUFD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