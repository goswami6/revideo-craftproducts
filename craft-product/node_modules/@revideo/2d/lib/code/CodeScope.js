import { unwrap } from '@revideo/core';
import { isCodeMetrics } from './CodeMetrics';
export function CODE(strings, ...tags) {
    const result = [];
    for (let i = 0; i < strings.length; i++) {
        result.push(strings[i]);
        const tag = tags[i];
        if (tag !== undefined) {
            if (Array.isArray(tag)) {
                result.push(...tag);
            }
            else {
                result.push(tag);
            }
        }
    }
    return result;
}
export function isCodeScope(value) {
    return value?.fragments !== undefined;
}
export function parseCodeScope(value) {
    if (typeof value === 'string') {
        return {
            progress: 0,
            fragments: [value],
        };
    }
    if (Array.isArray(value)) {
        return {
            progress: 0,
            fragments: value,
        };
    }
    return value;
}
export function resolveScope(scope, isAfter) {
    let code = '';
    const after = typeof isAfter === 'boolean' ? isAfter : isAfter(scope);
    for (const wrapped of scope.fragments) {
        code += resolveCodeTag(wrapped, after, isAfter);
    }
    return code;
}
export function resolveCodeTag(wrapped, after, isAfter = after) {
    const fragment = unwrap(wrapped);
    if (typeof fragment === 'string') {
        return fragment;
    }
    else if (isCodeScope(fragment)) {
        return resolveScope(fragment, isAfter);
    }
    else if (isCodeMetrics(fragment)) {
        return fragment.content;
    }
    else if (Array.isArray(fragment)) {
        return resolveScope({
            progress: 0,
            fragments: fragment,
        }, isAfter);
    }
    else {
        return after
            ? typeof fragment.after === 'string'
                ? fragment.after
                : fragment.after.content
            : typeof fragment.before === 'string'
                ? fragment.before
                : fragment.before.content;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29kZVNjb3BlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9jb2RlL0NvZGVTY29wZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRWxELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFXNUMsTUFBTSxVQUFVLElBQUksQ0FDbEIsT0FBNkIsRUFDN0IsR0FBRyxJQUFlO0lBRWxCLE1BQU0sTUFBTSxHQUFjLEVBQUUsQ0FBQztJQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ3RCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDdEIsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBVTtJQUNwQyxPQUFPLEtBQUssRUFBRSxTQUFTLEtBQUssU0FBUyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLEtBQXdCO0lBQ3JELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDOUIsT0FBTztZQUNMLFFBQVEsRUFBRSxDQUFDO1lBQ1gsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO1NBQ25CLENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDekIsT0FBTztZQUNMLFFBQVEsRUFBRSxDQUFDO1lBQ1gsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFJRCxNQUFNLFVBQVUsWUFBWSxDQUMxQixLQUFnQixFQUNoQixPQUF5QjtJQUV6QixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxNQUFNLEtBQUssR0FBRyxPQUFPLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLEtBQUssTUFBTSxPQUFPLElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3RDLElBQUksSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FDNUIsT0FBZ0IsRUFDaEIsS0FBYyxFQUNkLFVBQTRCLEtBQUs7SUFFakMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDakMsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztTQUFNLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDakMsT0FBTyxZQUFZLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7U0FBTSxJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ25DLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUMxQixDQUFDO1NBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDbkMsT0FBTyxZQUFZLENBQ2pCO1lBQ0UsUUFBUSxFQUFFLENBQUM7WUFDWCxTQUFTLEVBQUUsUUFBUTtTQUNwQixFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztTQUFNLENBQUM7UUFDTixPQUFPLEtBQUs7WUFDVixDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsS0FBSyxLQUFLLFFBQVE7Z0JBQ2xDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSztnQkFDaEIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUMxQixDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsTUFBTSxLQUFLLFFBQVE7Z0JBQ25DLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTTtnQkFDakIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ2hDLENBQUM7QUFDSCxDQUFDIn0=