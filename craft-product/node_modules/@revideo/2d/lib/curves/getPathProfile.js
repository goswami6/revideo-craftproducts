import { Vector2, clamp } from '@revideo/core';
import parse from 'parse-svg-path';
import { ArcSegment } from './ArcSegment';
import { CubicBezierSegment } from './CubicBezierSegment';
import { LineSegment } from './LineSegment';
import { QuadBezierSegment } from './QuadBezierSegment';
function addSegmentToProfile(profile, segment) {
    profile.segments.push(segment);
    profile.arcLength += segment.arcLength;
}
function getArg(command, argumentIndex) {
    return command[argumentIndex + 1];
}
function getVector2(command, argumentIndex) {
    return new Vector2(command[argumentIndex + 1], command[argumentIndex + 2]);
}
function getPoint(command, argumentIndex, isRelative, currentPoint) {
    const point = getVector2(command, argumentIndex);
    return isRelative ? currentPoint.add(point) : point;
}
function reflectControlPoint(control, currentPoint) {
    return currentPoint.add(currentPoint.sub(control));
}
function updateMinSin(profile) {
    for (let i = 0; i < profile.segments.length; i++) {
        const segmentA = profile.segments[i];
        const segmentB = profile.segments[(i + 1) % profile.segments.length];
        // In cubic bezier this equal p2.sub(p3)
        const startVector = segmentA.getPoint(1).tangent.scale(-1);
        // In cubic bezier this equal p1.sub(p0)
        const endVector = segmentB.getPoint(0).tangent;
        const dot = startVector.dot(endVector);
        const angleBetween = Math.acos(clamp(-1, 1, dot));
        const angleSin = Math.sin(angleBetween / 2);
        profile.minSin = Math.min(profile.minSin, Math.abs(angleSin));
    }
}
export function getPathProfile(data) {
    const profile = {
        segments: [],
        arcLength: 0,
        minSin: 1,
    };
    const segments = parse(data);
    let currentPoint = new Vector2(0, 0);
    let firstPoint = null;
    for (const segment of segments) {
        const command = segment[0].toLowerCase();
        const isRelative = segment[0] === command;
        if (command === 'm') {
            currentPoint = getPoint(segment, 0, isRelative, currentPoint);
            firstPoint = currentPoint;
        }
        else if (command === 'l') {
            const nextPoint = getPoint(segment, 0, isRelative, currentPoint);
            addSegmentToProfile(profile, new LineSegment(currentPoint, nextPoint));
            currentPoint = nextPoint;
        }
        else if (command === 'h') {
            const x = getArg(segment, 0);
            const nextPoint = isRelative
                ? currentPoint.addX(x)
                : new Vector2(x, currentPoint.y);
            addSegmentToProfile(profile, new LineSegment(currentPoint, nextPoint));
            currentPoint = nextPoint;
        }
        else if (command === 'v') {
            const y = getArg(segment, 0);
            const nextPoint = isRelative
                ? currentPoint.addY(y)
                : new Vector2(currentPoint.x, y);
            addSegmentToProfile(profile, new LineSegment(currentPoint, nextPoint));
            currentPoint = nextPoint;
        }
        else if (command === 'q') {
            const controlPoint = getPoint(segment, 0, isRelative, currentPoint);
            const nextPoint = getPoint(segment, 2, isRelative, currentPoint);
            addSegmentToProfile(profile, new QuadBezierSegment(currentPoint, controlPoint, nextPoint));
            currentPoint = nextPoint;
        }
        else if (command === 't') {
            const lastSegment = profile.segments.at(-1);
            const controlPoint = lastSegment instanceof QuadBezierSegment
                ? reflectControlPoint(lastSegment.p1, currentPoint)
                : currentPoint;
            const nextPoint = getPoint(segment, 0, isRelative, currentPoint);
            addSegmentToProfile(profile, new QuadBezierSegment(currentPoint, controlPoint, nextPoint));
            currentPoint = nextPoint;
        }
        else if (command === 'c') {
            const startControlPoint = getPoint(segment, 0, isRelative, currentPoint);
            const endControlPoint = getPoint(segment, 2, isRelative, currentPoint);
            const nextPoint = getPoint(segment, 4, isRelative, currentPoint);
            addSegmentToProfile(profile, new CubicBezierSegment(currentPoint, startControlPoint, endControlPoint, nextPoint));
            currentPoint = nextPoint;
        }
        else if (command === 's') {
            const lastSegment = profile.segments.at(-1);
            const startControlPoint = lastSegment instanceof CubicBezierSegment
                ? reflectControlPoint(lastSegment.p2, currentPoint)
                : currentPoint;
            const endControlPoint = getPoint(segment, 0, isRelative, currentPoint);
            const nextPoint = getPoint(segment, 2, isRelative, currentPoint);
            addSegmentToProfile(profile, new CubicBezierSegment(currentPoint, startControlPoint, endControlPoint, nextPoint));
            currentPoint = nextPoint;
        }
        else if (command === 'a') {
            const radius = getVector2(segment, 0);
            const angle = getArg(segment, 2);
            const largeArcFlag = getArg(segment, 3);
            const sweepFlag = getArg(segment, 4);
            const nextPoint = getPoint(segment, 5, isRelative, currentPoint);
            addSegmentToProfile(profile, new ArcSegment(currentPoint, radius, angle, largeArcFlag, sweepFlag, nextPoint));
            currentPoint = nextPoint;
        }
        else if (command === 'z') {
            if (!firstPoint)
                continue;
            if (currentPoint.equals(firstPoint))
                continue;
            addSegmentToProfile(profile, new LineSegment(currentPoint, firstPoint));
            currentPoint = firstPoint;
        }
    }
    updateMinSin(profile);
    return profile;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UGF0aFByb2ZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL2N1cnZlcy9nZXRQYXRoUHJvZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEtBQW9CLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN4QyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBR3RELFNBQVMsbUJBQW1CLENBQUMsT0FBcUIsRUFBRSxPQUFnQjtJQUNsRSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQixPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDekMsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLE9BQW9CLEVBQUUsYUFBcUI7SUFDekQsT0FBTyxPQUFPLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBVyxDQUFDO0FBQzlDLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxPQUFvQixFQUFFLGFBQXFCO0lBQzdELE9BQU8sSUFBSSxPQUFPLENBQ2hCLE9BQU8sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFXLEVBQ3BDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFXLENBQ3JDLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQ2YsT0FBb0IsRUFDcEIsYUFBcUIsRUFDckIsVUFBbUIsRUFDbkIsWUFBcUI7SUFFckIsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztJ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