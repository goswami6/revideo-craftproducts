var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Node_1;
import { BBox, DependencyContext, UNIFORM_DESTINATION_MATRIX, UNIFORM_SOURCE_MATRIX, UNIFORM_TIME, Vector2, all, clamp, createSignal, easeInOutCubic, isReactive, modify, threadable, transformAngle, transformScalar, unwrap, useLogger, } from '@revideo/core';
import { NODE_NAME, cloneable, colorSignal, computed, getPropertiesOf, initial, initializeSignals, inspectable, nodeName, parser, signal, vector2Signal, wrapper, } from '../decorators';
import { filtersSignal } from '../decorators/filtersSignal';
import { spacingSignal } from '../decorators/spacingSignal';
import { parseShader, } from '../partials/ShaderConfig';
import { useScene2D } from '../scenes/useScene2D';
import { drawLine } from '../utils';
let Node = Node_1 = class Node {
    get x() {
        return this.position.x;
    }
    get y() {
        return this.position.y;
    }
    getAbsolutePosition() {
        const matrix = this.localToWorld();
        return new Vector2(matrix.m41, matrix.m42);
    }
    setAbsolutePosition(value) {
        this.position(modify(value, unwrapped => new Vector2(unwrapped).transformAsPoint(this.worldToParent())));
    }
    getAbsoluteRotation() {
        const matrix = this.localToWorld();
        return Vector2.degrees(matrix.m11, matrix.m12);
    }
    setAbsoluteRotation(value) {
        this.rotation(modify(value, unwrapped => transformAngle(unwrapped, this.worldToParent())));
    }
    getAbsoluteScale() {
        const matrix = this.localToWorld();
        return new Vector2(Vector2.magnitude(matrix.m11, matrix.m12), Vector2.magnitude(matrix.m21, matrix.m22));
    }
    setAbsoluteScale(value) {
        this.scale(modify(value, unwrapped => this.getRelativeScale(new Vector2(unwrapped))));
    }
    getRelativeScale(scale) {
        const parentScale = this.parent()?.absoluteScale() ?? Vector2.one;
        return scale.div(parentScale);
    }
    *tweenCompositeOperation(value, time, timingFunction) {
        const nextValue = unwrap(value);
        if (nextValue === 'source-over') {
            yield* this.compositeOverride(1, time, timingFunction);
            this.compositeOverride(0);
            this.compositeOperation(nextValue);
        }
        else {
            this.compositeOperation(nextValue);
            this.compositeOverride(1);
            yield* this.compositeOverride(0, time, timingFunction);
        }
    }
    absoluteOpacity() {
        return (this.parent()?.absoluteOpacity() ?? 1) * this.opacity();
    }
    hasFilters() {
        return !!this.filters().find(filter => filter.isActive());
    }
    hasShadow() {
        return (!!this.shadowColor() &&
            (this.shadowBlur() > 0 ||
                this.shadowOffset.x() !== 0 ||
                this.shadowOffset.y() !== 0));
    }
    filterString() {
        let filters = '';
        const matrix = this.compositeToWorld();
        for (const filter of this.filters()) {
            if (filter.isActive()) {
                filters += ' ' + filter.serialize(matrix);
            }
        }
        return filters;
    }
    getSpawner() {
        return this.children();
    }
    setSpawner(value) {
        this.children(value);
    }
    setChildren(value) {
        if (this.children.context.raw() === value) {
            return;
        }
        this.children.context.setter(value);
        if (!isReactive(value)) {
            this.spawnChildren(false, value);
        }
        else if (!this.hasSpawnedChildren) {
            for (const oldChild of this.realChildren) {
                oldChild.parent(null);
            }
        }
    }
    getChildren() {
        this.children.context.getter();
        return this.spawnedChildren();
    }
    spawnedChildren() {
        const children = this.children.context.getter();
        if (isReactive(this.children.context.raw())) {
            this.spawnChildren(true, children);
        }
        return this.realChildren;
    }
    sortedChildren() {
        return [...this.children()].sort((a, b) => Math.sign(a.zIndex() - b.zIndex()));
    }
    constructor({ children, spawner, key, ...rest }) {
        this.compositeOverride = createSignal(0);
        this.stateStack = [];
        this.realChildren = [];
        this.hasSpawnedChildren = false;
        this.parent = createSignal(null);
        this.properties = getPropertiesOf(this);
        const scene = useScene2D();
        [this.key, this.unregister] = scene.registerNode(this, key);
        this.view2D = scene.getView();
        this.creationStack = new Error().stack;
        initializeSignals(this, rest);
        if (spawner) {
            useLogger().warn({
                message: 'Node.spawner() has been deprecated.',
                remarks: 'Use <code>Node.children()</code> instead.',
                inspect: this.key,
                stack: new Error().stack,
            });
        }
        this.children(spawner ?? children);
    }
    /**
     * Get the local-to-world matrix for this node.
     *
     * @remarks
     * This matrix transforms vectors from local space of this node to world
     * space.
     *
     * @example
     * Calculate the absolute position of a point located 200 pixels to the right
     * of the node:
     * ```ts
     * const local = new Vector2(0, 200);
     * const world = local.transformAsPoint(node.localToWorld());
     * ```
     */
    localToWorld() {
        const parent = this.parent();
        return parent
            ? parent.localToWorld().multiply(this.localToParent())
            : this.localToParent();
    }
    /**
     * Get the world-to-local matrix for this node.
     *
     * @remarks
     * This matrix transforms vectors from world space to local space of this
     * node.
     *
     * @example
     * Calculate the position relative to this node for a point located in the
     * top-left corner of the screen:
     * ```ts
     * const world = new Vector2(0, 0);
     * const local = world.transformAsPoint(node.worldToLocal());
     * ```
     */
    worldToLocal() {
        return this.localToWorld().inverse();
    }
    /**
     * Get the world-to-parent matrix for this node.
     *
     * @remarks
     * This matrix transforms vectors from world space to local space of this
     * node's parent.
     */
    worldToParent() {
        return this.parent()?.worldToLocal() ?? new DOMMatrix();
    }
    /**
     * Get the local-to-parent matrix for this node.
     *
     * @remarks
     * This matrix transforms vectors from local space of this node to local space
     * of this node's parent.
     */
    localToParent() {
        const matrix = new DOMMatrix();
        matrix.translateSelf(this.x(), this.y());
        matrix.rotateSelf(0, 0, this.rotation());
        matrix.scaleSelf(this.scale.x(), this.scale.y());
        matrix.skewXSelf(this.skew.x());
        matrix.skewYSelf(this.skew.y());
        return matrix;
    }
    /**
     * A matrix mapping composite space to world space.
     *
     * @remarks
     * Certain effects such as blur and shadows ignore the current transformation.
     * This matrix can be used to transform their parameters so that the effect
     * appears relative to the closest composite root.
     */
    compositeToWorld() {
        return this.compositeRoot()?.localToWorld() ?? new DOMMatrix();
    }
    compositeRoot() {
        if (this.composite()) {
            return this;
        }
        return this.parent()?.compositeRoot() ?? null;
    }
    compositeToLocal() {
        const root = this.compositeRoot();
        if (root) {
            const worldToLocal = this.worldToLocal();
            worldToLocal.m44 = 1;
            return root.localToWorld().multiply(worldToLocal);
        }
        return new DOMMatrix();
    }
    view() {
        return this.view2D;
    }
    /**
     * Add the given node(s) as the children of this node.
     *
     * @remarks
     * The nodes will be appended at the end of the children list.
     *
     * @example
     * ```tsx
     * const node = <Layout />;
     * node.add(<Rect />);
     * node.add(<Circle />);
     * ```
     * Result:
     * ```mermaid
     * graph TD;
     *   layout([Layout])
     *   circle([Circle])
     *   rect([Rect])
     *     layout-->rect;
     *     layout-->circle;
     * ```
     *
     * @param node - A node or an array of nodes to append.
     */
    add(node) {
        return this.insert(node, Infinity);
    }
    /**
     * Insert the given node(s) at the specified index in the children list.
     *
     * @example
     * ```tsx
     * const node = (
     *   <Layout>
     *     <Rect />
     *     <Circle />
     *   </Layout>
     * );
     *
     * node.insert(<Txt />, 1);
     * ```
     *
     * Result:
     * ```mermaid
     * graph TD;
     *   layout([Layout])
     *   circle([Circle])
     *   text([Text])
     *   rect([Rect])
     *     layout-->rect;
     *     layout-->text;
     *     layout-->circle;
     * ```
     *
     * @param node - A node or an array of nodes to insert.
     * @param index - An index at which to insert the node(s).
     */
    insert(node, index = 0) {
        const array = Array.isArray(node) ? node : [node];
        if (array.length === 0) {
            return this;
        }
        const children = this.children();
        const newChildren = children.slice(0, index);
        for (const node of array) {
            if (node instanceof Node_1) {
                newChildren.push(node);
                node.remove();
                node.parent(this);
            }
        }
        newChildren.push(...children.slice(index));
        this.setParsedChildren(newChildren);
        return this;
    }
    /**
     * Remove this node from the tree.
     */
    remove() {
        const current = this.parent();
        if (current === null) {
            return this;
        }
        current.removeChild(this);
        this.parent(null);
        return this;
    }
    /**
     * Rearrange this node in relation to its siblings.
     *
     * @remarks
     * Children are rendered starting from the beginning of the children list.
     * We can change the rendering order by rearranging said list.
     *
     * A positive `by` arguments move the node up (it will be rendered on top of
     * the elements it has passed). Negative values move it down.
     *
     * @param by - Number of places by which the node should be moved.
     */
    move(by = 1) {
        const parent = this.parent();
        if (by === 0 || !parent) {
            return this;
        }
        const children = parent.children();
        const newChildren = [];
        if (by > 0) {
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                if (child === this) {
                    const target = i + by;
                    for (; i < target && i + 1 < children.length; i++) {
                        newChildren[i] = children[i + 1];
                    }
                }
                newChildren[i] = child;
            }
        }
        else {
            for (let i = children.length - 1; i >= 0; i--) {
                const child = children[i];
                if (child === this) {
                    const target = i + by;
                    for (; i > target && i > 0; i--) {
                        newChildren[i] = children[i - 1];
                    }
                }
                newChildren[i] = child;
            }
        }
        parent.setParsedChildren(newChildren);
        return this;
    }
    /**
     * Move the node up in relation to its siblings.
     *
     * @remarks
     * The node will exchange places with the sibling right above it (if any) and
     * from then on will be rendered on top of it.
     */
    moveUp() {
        return this.move(1);
    }
    /**
     * Move the node down in relation to its siblings.
     *
     * @remarks
     * The node will exchange places with the sibling right below it (if any) and
     * from then on will be rendered under it.
     */
    moveDown() {
        return this.move(-1);
    }
    /**
     * Move the node to the top in relation to its siblings.
     *
     * @remarks
     * The node will be placed at the end of the children list and from then on
     * will be rendered on top of all of its siblings.
     */
    moveToTop() {
        return this.move(Infinity);
    }
    /**
     * Move the node to the bottom in relation to its siblings.
     *
     * @remarks
     * The node will be placed at the beginning of the children list and from then
     * on will be rendered below all of its siblings.
     */
    moveToBottom() {
        return this.move(-Infinity);
    }
    /**
     * Move the node to the provided position relative to its siblings.
     *
     * @remarks
     * If the node is getting moved to a lower position, it will be placed below
     * the sibling that's currently at the provided index (if any).
     * If the node is getting moved to a higher position, it will be placed above
     * the sibling that's currently at the provided index (if any).
     *
     * @param index - The index to move the node to.
     */
    moveTo(index) {
        const parent = this.parent();
        if (!parent) {
            return this;
        }
        const currentIndex = parent.children().indexOf(this);
        const by = index - currentIndex;
        return this.move(by);
    }
    /**
     * Move the node below the provided node in the parent's layout.
     *
     * @remarks
     * The node will be moved below the provided node and from then on will be
     * rendered below it. By default, if the node is already positioned lower than
     * the sibling node, it will not get moved.
     *
     * @param node - The sibling node below which to move.
     * @param directlyBelow - Whether the node should be positioned directly below
     *                        the sibling. When true, will move the node even if
     *                        it is already positioned below the sibling.
     */
    moveBelow(node, directlyBelow = false) {
        const parent = this.parent();
        if (!parent) {
            return this;
        }
        if (node.parent() !== parent) {
            useLogger().error("Cannot position nodes relative to each other if they don't belong to the same parent.");
            return this;
        }
        const children = parent.children();
        const ownIndex = children.indexOf(this);
        const otherIndex = children.indexOf(node);
        if (!directlyBelow && ownIndex < otherIndex) {
            // Nothing to do if the node is already positioned below the target node.
            // We could move the node so it's directly below the sibling node, but
            // that might suddenly move it on top of other nodes. This is likely
            // not what the user wanted to happen when calling this method.
            return this;
        }
        const by = otherIndex - ownIndex - 1;
        return this.move(by);
    }
    /**
     * Move the node above the provided node in the parent's layout.
     *
     * @remarks
     * The node will be moved above the provided node and from then on will be
     * rendered on top of it. By default, if the node is already positioned
     * higher than the sibling node, it will not get moved.
     *
     * @param node - The sibling node below which to move.
     * @param directlyAbove - Whether the node should be positioned directly above the
     *                        sibling. When true, will move the node even if it is
     *                        already positioned above the sibling.
     */
    moveAbove(node, directlyAbove = false) {
        const parent = this.parent();
        if (!parent) {
            return this;
        }
        if (node.parent() !== parent) {
            useLogger().error("Cannot position nodes relative to each other if they don't belong to the same parent.");
            return this;
        }
        const children = parent.children();
        const ownIndex = children.indexOf(this);
        const otherIndex = children.indexOf(node);
        if (!directlyAbove && ownIndex > otherIndex) {
            // Nothing to do if the node is already positioned above the target node.
            // We could move the node so it's directly above the sibling node, but
            // that might suddenly move it below other nodes. This is likely not what
            // the user wanted to happen when calling this method.
            return this;
        }
        const by = otherIndex - ownIndex + 1;
        return this.move(by);
    }
    /**
     * Change the parent of this node while keeping the absolute transform.
     *
     * @remarks
     * After performing this operation, the node will stay in the same place
     * visually, but its parent will be changed.
     *
     * @param newParent - The new parent of this node.
     */
    reparent(newParent) {
        const position = this.absolutePosition();
        const rotation = this.absoluteRotation();
        const scale = this.absoluteScale();
        newParent.add(this);
        this.absolutePosition(position);
        this.absoluteRotation(rotation);
        this.absoluteScale(scale);
    }
    /**
     * Remove all children of this node.
     */
    removeChildren() {
        for (const oldChild of this.realChildren) {
            oldChild.parent(null);
        }
        this.setParsedChildren([]);
    }
    /**
     * Get the current children of this node.
     *
     * @remarks
     * Unlike {@link children}, this method does not have any side effects.
     * It does not register the `children` signal as a dependency, and it does not
     * spawn any children. It can be used to safely retrieve the current state of
     * the scene graph for debugging purposes.
     */
    peekChildren() {
        return this.realChildren;
    }
    findAll(predicate) {
        const result = [];
        const queue = this.reversedChildren();
        while (queue.length > 0) {
            const node = queue.pop();
            if (predicate(node)) {
                result.push(node);
            }
            const children = node.children();
            for (let i = children.length - 1; i >= 0; i--) {
                queue.push(children[i]);
            }
        }
        return result;
    }
    findFirst(predicate) {
        const queue = this.reversedChildren();
        while (queue.length > 0) {
            const node = queue.pop();
            if (predicate(node)) {
                return node;
            }
            const children = node.children();
            for (let i = children.length - 1; i >= 0; i--) {
                queue.push(children[i]);
            }
        }
        return null;
    }
    findLast(predicate) {
        const search = [];
        const queue = this.reversedChildren();
        while (queue.length > 0) {
            const node = queue.pop();
            search.push(node);
            const children = node.children();
            for (let i = children.length - 1; i >= 0; i--) {
                queue.push(children[i]);
            }
        }
        while (search.length > 0) {
            const node = search.pop();
            if (predicate(node)) {
                return node;
            }
        }
        return null;
    }
    findAncestor(predicate) {
        let parent = this.parent();
        while (parent) {
            if (predicate(parent)) {
                return parent;
            }
            parent = parent.parent();
        }
        return null;
    }
    /**
     * Get the nth children cast to the specified type.
     *
     * @param index - The index of the child to retrieve.
     */
    childAs(index) {
        return this.children()[index] ?? null;
    }
    /**
     * Get the children array cast to the specified type.
     */
    childrenAs() {
        return this.children();
    }
    /**
     * Get the parent cast to the specified type.
     */
    parentAs() {
        return this.parent() ?? null;
    }
    /**
     * Prepare this node to be disposed of.
     *
     * @remarks
     * This method is called automatically when a scene is refreshed. It will
     * be called even if the node is not currently attached to the tree.
     *
     * The goal of this method is to clean any external references to allow the
     * node to be garbage collected.
     */
    dispose() {
        if (!this.unregister) {
            return;
        }
        this.stateStack = [];
        this.unregister();
        this.unregister = null;
        for (const { signal } of this) {
            signal?.context.dispose();
        }
        for (const child of this.realChildren) {
            child.dispose();
        }
    }
    /**
     * Create a copy of this node.
     *
     * @param customProps - Properties to override.
     */
    clone(customProps = {}) {
        const props = { ...customProps };
        if (isReactive(this.children.context.raw())) {
            props.children ?? (props.children = this.children.context.raw());
        }
        else if (this.children().length > 0) {
            props.children ?? (props.children = this.children().map(child => child.clone()));
        }
        for (const { key, meta, signal } of this) {
            if (!meta.cloneable || key in props)
                continue;
            if (meta.compound) {
                for (const [key, property] of meta.compoundEntries) {
                    if (property in props)
                        continue;
                    const component = signal[key];
                    if (!component.context.isInitial()) {
                        props[property] = component.context.raw();
                    }
                }
            }
            else if (!signal.context.isInitial()) {
                props[key] = signal.context.raw();
            }
        }
        return this.instantiate(props);
    }
    /**
     * Create a copy of this node.
     *
     * @remarks
     * Unlike {@link clone}, a snapshot clone calculates any reactive properties
     * at the moment of cloning and passes the raw values to the copy.
     *
     * @param customProps - Properties to override.
     */
    snapshotClone(customProps = {}) {
        const props = {
            ...this.getState(),
            ...customProps,
        };
        if (this.children().length > 0) {
            props.children ?? (props.children = this.children().map(child => child.snapshotClone()));
        }
        return this.instantiate(props);
    }
    /**
     * Create a reactive copy of this node.
     *
     * @remarks
     * A reactive copy has all its properties dynamically updated to match the
     * source node.
     *
     * @param customProps - Properties to override.
     */
    reactiveClone(customProps = {}) {
        const props = { ...customProps };
        if (this.children().length > 0) {
            props.children ?? (props.children = this.children().map(child => child.reactiveClone()));
        }
        for (const { key, meta, signal } of this) {
            if (!meta.cloneable || key in props)
                continue;
            props[key] = () => signal();
        }
        return this.instantiate(props);
    }
    /**
     * Create an instance of this node's class.
     *
     * @param props - Properties to pass to the constructor.
     */
    instantiate(props = {}) {
        return new this.constructor(props);
    }
    /**
     * Set the children without parsing them.
     *
     * @remarks
     * This method assumes that the caller took care of parsing the children and
     * updating the hierarchy.
     *
     * @param value - The children to set.
     */
    setParsedChildren(value) {
        this.children.context.setter(value);
        this.realChildren = value;
    }
    spawnChildren(reactive, children) {
        const parsedChildren = this.parseChildren(children);
        const keep = new Set();
        for (const newChild of parsedChildren) {
            const current = newChild.parent.context.raw();
            if (current && current !== this) {
                current.removeChild(newChild);
            }
            keep.add(newChild.key);
            newChild.parent(this);
        }
        for (const oldChild of this.realChildren) {
            if (!keep.has(oldChild.key)) {
                oldChild.parent(null);
            }
        }
        this.hasSpawnedChildren = reactive;
        this.realChildren = parsedChildren;
    }
    /**
     * Parse any `ComponentChildren` into an array of nodes.
     *
     * @param children - The children to parse.
     */
    parseChildren(children) {
        const result = [];
        const array = Array.isArray(children) ? children : [children];
        for (const child of array) {
            if (child instanceof Node_1) {
                result.push(child);
            }
        }
        return result;
    }
    /**
     * Remove the given child.
     */
    removeChild(child) {
        this.setParsedChildren(this.children().filter(node => node !== child));
    }
    /**
     * Whether this node should be cached or not.
     */
    requiresCache() {
        return (this.cache() ||
            this.opacity() < 1 ||
            this.compositeOperation() !== 'source-over' ||
            this.hasFilters() ||
            this.hasShadow() ||
            this.shaders().length > 0);
    }
    cacheCanvas() {
        const canvas = document.createElement('canvas').getContext('2d');
        if (!canvas) {
            throw new Error('Could not create a cache canvas');
        }
        return canvas;
    }
    /**
     * Get a cache canvas with the contents of this node rendered onto it.
     */
    async cachedCanvas() {
        const context = this.cacheCanvas();
        const cache = this.worldSpaceCacheBBox();
        const matrix = this.localToWorld();
        context.canvas.width = cache.width;
        context.canvas.height = cache.height;
        context.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e - cache.x, matrix.f - cache.y);
        await this.draw(context);
        return context;
    }
    /**
     * Get a bounding box for the contents rendered by this node.
     *
     * @remarks
     * The returned bounding box should be in local space.
     */
    getCacheBBox() {
        return new BBox();
    }
    /**
     * Get a bounding box for the contents rendered by this node as well
     * as its children.
     */
    cacheBBox() {
        const cache = this.getCacheBBox();
        const children = this.children();
        const padding = this.cachePadding();
        if (children.length === 0) {
            return cache.addSpacing(padding);
        }
        const points = cache.corners;
        for (const child of children) {
            const childCache = child.fullCacheBBox();
            const childMatrix = child.localToParent();
            points.push(...childCache.corners.map(r => r.transformAsPoint(childMatrix)));
        }
        const bbox = BBox.fromPoints(...points);
        return bbox.addSpacing(padding);
    }
    /**
     * Get a bounding box for the contents rendered by this node (including
     * effects applied after caching).
     *
     * @remarks
     * The returned bounding box should be in local space.
     */
    fullCacheBBox() {
        const matrix = this.compositeToLocal();
        const shadowOffset = this.shadowOffset().transform(matrix);
        const shadowBlur = transformScalar(this.shadowBlur(), matrix);
        const result = this.cacheBBox().expand(this.filters.blur() * 2 + shadowBlur);
        if (shadowOffset.x < 0) {
            result.x += shadowOffset.x;
            result.width -= shadowOffset.x;
        }
        else {
            result.width += shadowOffset.x;
        }
        if (shadowOffset.y < 0) {
            result.y += shadowOffset.y;
            result.height -= shadowOffset.y;
        }
        else {
            result.height += shadowOffset.y;
        }
        return result;
    }
    /**
     * Get a bounding box in world space for the contents rendered by this node as
     * well as its children.
     *
     * @remarks
     * This is the same the bounding box returned by {@link cacheBBox} only
     * transformed to world space.
     */
    worldSpaceCacheBBox() {
        const viewBBox = BBox.fromSizeCentered(this.view().size());
        const canvasBBox = BBox.fromPoints(...viewBBox.transformCorners(this.view().localToWorld()));
        const cacheBBox = BBox.fromPoints(...this.cacheBBox().transformCorners(this.localToWorld())).pixelPerfect.expand(2);
        return canvasBBox.intersection(cacheBBox);
    }
    parentWorldSpaceCacheBBox() {
        return (this.findAncestor(node => node.requiresCache())?.worldSpaceCacheBBox() ??
            new BBox(Vector2.zero, useScene2D().getSize()));
    }
    /**
     * Prepare the given context for drawing a cached node onto it.
     *
     * @remarks
     * This method is called before the contents of the cache canvas are drawn
     * on the screen. It can be used to apply effects to the entire node together
     * with its children, instead of applying them individually.
     * Effects such as transparency, shadows, and filters use this technique.
     *
     * Whether the node is cached is decided by the {@link requiresCache} method.
     *
     * @param context - The context using which the cache will be drawn.
     */
    setupDrawFromCache(context) {
        context.globalCompositeOperation = this.compositeOperation();
        context.globalAlpha *= this.opacity();
        if (this.hasFilters()) {
            context.filter = this.filterString();
        }
        if (this.hasShadow()) {
            const matrix = this.compositeToWorld();
            const offset = this.shadowOffset().transform(matrix);
            const blur = transformScalar(this.shadowBlur(), matrix);
            context.shadowColor = this.shadowColor().serialize();
            context.shadowBlur = blur;
            context.shadowOffsetX = offset.x;
            context.shadowOffsetY = offset.y;
        }
        const matrix = this.worldToLocal();
        context.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
    }
    renderFromSource(context, source, x, y) {
        this.setupDrawFromCache(context);
        const compositeOverride = this.compositeOverride();
        context.drawImage(source, x, y);
        if (compositeOverride > 0) {
            context.save();
            context.globalAlpha *= compositeOverride;
            context.globalCompositeOperation = 'source-over';
            context.drawImage(source, x, y);
            context.restore();
        }
    }
    shaderCanvas(destination, source) {
        const shaders = this.shaders();
        if (shaders.length === 0) {
            return null;
        }
        const scene = useScene2D();
        const size = scene.getRealSize();
        const parentCacheRect = this.parentWorldSpaceCacheBBox();
        const cameraToWorld = new DOMMatrix()
            .scaleSelf(size.width / parentCacheRect.width, size.height / -parentCacheRect.height)
            .translateSelf(parentCacheRect.x / -size.width, parentCacheRect.y / size.height - 1);
        const cacheRect = this.worldSpaceCacheBBox();
        const cameraToCache = new DOMMatrix()
            .scaleSelf(size.width / cacheRect.width, size.height / -cacheRect.height)
            .translateSelf(cacheRect.x / -size.width, cacheRect.y / size.height - 1)
            .invertSelf();
        const gl = scene.shaders.getGL();
        scene.shaders.copyTextures(destination, source);
        scene.shaders.clear();
        for (const shader of shaders) {
            const program = scene.shaders.getProgram(shader.fragment);
            if (!program) {
                continue;
            }
            if (shader.uniforms) {
                for (const [name, uniform] of Object.entries(shader.uniforms)) {
                    const location = gl.getUniformLocation(program, name);
                    if (location === null) {
                        continue;
                    }
                    const value = unwrap(uniform);
                    if (typeof value === 'number') {
                        gl.uniform1f(location, value);
                    }
                    else if ('toUniform' in value) {
                        value.toUniform(gl, location);
                    }
                    else if (value.length === 1) {
                        gl.uniform1f(location, value[0]);
                    }
                    else if (value.length === 2) {
                        gl.uniform2f(location, value[0], value[1]);
                    }
                    else if (value.length === 3) {
                        gl.uniform3f(location, value[0], value[1], value[2]);
                    }
                    else if (value.length === 4) {
                        gl.uniform4f(location, value[0], value[1], value[2], value[3]);
                    }
                }
            }
            gl.uniform1f(gl.getUniformLocation(program, UNIFORM_TIME), this.view2D.globalTime());
            gl.uniform1i(gl.getUniformLocation(program, UNIFORM_TIME), scene.playback.frame);
            gl.uniformMatrix4fv(gl.getUniformLocation(program, UNIFORM_SOURCE_MATRIX), false, cameraToCache.toFloat32Array());
            gl.uniformMatrix4fv(gl.getUniformLocation(program, UNIFORM_DESTINATION_MATRIX), false, cameraToWorld.toFloat32Array());
            shader.setup?.(gl, program);
            scene.shaders.render();
            shader.teardown?.(gl, program);
        }
        return gl.canvas;
    }
    /**
     * Render this node onto the given canvas.
     *
     * @param context - The context to draw with.
     */
    async render(context) {
        if (this.absoluteOpacity() <= 0) {
            return;
        }
        context.save();
        this.transformContext(context);
        if (this.requiresCache()) {
            const cacheRect = this.worldSpaceCacheBBox();
            if (cacheRect.width !== 0 && cacheRect.height !== 0) {
                const cache = (await this.cachedCanvas()).canvas;
                const source = this.shaderCanvas(context.canvas, cache);
                if (source) {
                    this.renderFromSource(context, source, 0, 0);
                }
                else {
                    this.renderFromSource(context, cache, cacheRect.position.x, cacheRect.position.y);
                }
            }
        }
        else {
            await this.draw(context);
        }
        context.restore();
    }
    /**
     * Draw this node onto the canvas.
     *
     * @remarks
     * This method is used when drawing directly onto the screen as well as onto
     * the cache canvas.
     * It assumes that the context have already been transformed to local space.
     *
     * @param context - The context to draw with.
     */
    async draw(context) {
        await this.drawChildren(context);
    }
    async drawChildren(context) {
        for (const child of this.sortedChildren()) {
            await child.render(context);
        }
    }
    /**
     * Draw an overlay for this node.
     *
     * @remarks
     * The overlay for the currently inspected node is displayed on top of the
     * canvas.
     *
     * The provided context is in screen space. The local-to-screen matrix can be
     * used to transform all shapes that need to be displayed.
     * This approach allows to keep the line widths and gizmo sizes consistent,
     * no matter how zoomed-in the view is.
     *
     * @param context - The context to draw with.
     * @param matrix - A local-to-screen matrix.
     */
    drawOverlay(context, matrix) {
        const box = this.cacheBBox().transformCorners(matrix);
        const cache = this.getCacheBBox().transformCorners(matrix);
        context.strokeStyle = 'white';
        context.lineWidth = 1;
        context.beginPath();
        drawLine(context, box);
        context.closePath();
        context.stroke();
        context.strokeStyle = 'blue';
        context.beginPath();
        drawLine(context, cache);
        context.closePath();
        context.stroke();
    }
    transformContext(context) {
        const matrix = this.localToParent();
        context.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
    }
    /**
     * Try to find a node intersecting the given position.
     *
     * @param position - The searched position.
     */
    hit(position) {
        let hit = null;
        const local = position.transformAsPoint(this.localToParent().inverse());
        const children = this.children();
        for (let i = children.length - 1; i >= 0; i--) {
            hit = children[i].hit(local);
            if (hit) {
                break;
            }
        }
        return hit;
    }
    /**
     * Collect all asynchronous resources used by this node.
     */
    collectAsyncResources() {
        for (const child of this.children()) {
            child.collectAsyncResources();
        }
    }
    /**
     * Wait for any asynchronous resources that this node or its children have.
     *
     * @remarks
     * Certain resources like images are always loaded asynchronously.
     * Awaiting this method makes sure that all such resources are done loading
     * before continuing the animation.
     */
    async toPromise() {
        do {
            await DependencyContext.consumePromises();
            this.collectAsyncResources();
        } while (DependencyContext.hasPromises());
        return this;
    }
    /**
     * Return a snapshot of the node's current signal values.
     *
     * @remarks
     * This method will calculate the values of any reactive properties of the
     * node at the time the method is called.
     */
    getState() {
        const state = {};
        for (const { key, meta, signal } of this) {
            if (!meta.cloneable || key in state)
                continue;
            state[key] = signal();
        }
        return state;
    }
    applyState(state, duration, timing = easeInOutCubic) {
        if (duration === undefined) {
            for (const key in state) {
                const signal = this.signalByKey(key);
                if (signal) {
                    signal(state[key]);
                }
            }
        }
        const tasks = [];
        for (const key in state) {
            const signal = this.signalByKey(key);
            if (state[key] !== signal.context.raw()) {
                tasks.push(signal(state[key], duration, timing));
            }
        }
        return all(...tasks);
    }
    /**
     * Push a snapshot of the node's current state onto the node's state stack.
     *
     * @remarks
     * This method can be used together with the {@link restore} method to save a
     * node's current state and later restore it. It is possible to store more
     * than one state by calling `save` method multiple times.
     */
    save() {
        this.stateStack.push(this.getState());
    }
    restore(duration, timing = easeInOutCubic) {
        const state = this.stateStack.pop();
        if (state !== undefined) {
            return this.applyState(state, duration, timing);
        }
    }
    *[Symbol.iterator]() {
        for (const key in this.properties) {
            const meta = this.properties[key];
            const signal = this.signalByKey(key);
            yield { meta, signal, key };
        }
    }
    signalByKey(key) {
        return this[key];
    }
    reversedChildren() {
        const children = this.children();
        const result = [];
        for (let i = children.length - 1; i >= 0; i--) {
            result.push(children[i]);
        }
        return result;
    }
};
__decorate([
    vector2Signal()
], Node.prototype, "position", void 0);
__decorate([
    wrapper(Vector2),
    cloneable(false),
    signal()
], Node.prototype, "absolutePosition", void 0);
__decorate([
    initial(0),
    signal()
], Node.prototype, "rotation", void 0);
__decorate([
    cloneable(false),
    signal()
], Node.prototype, "absoluteRotation", void 0);
__decorate([
    initial(Vector2.one),
    vector2Signal('scale')
], Node.prototype, "scale", void 0);
__decorate([
    initial(Vector2.zero),
    vector2Signal('skew')
], Node.prototype, "skew", void 0);
__decorate([
    wrapper(Vector2),
    cloneable(false),
    signal()
], Node.prototype, "absoluteScale", void 0);
__decorate([
    initial(0),
    signal()
], Node.prototype, "zIndex", void 0);
__decorate([
    initial(false),
    signal()
], Node.prototype, "cache", void 0);
__decorate([
    spacingSignal('cachePadding')
], Node.prototype, "cachePadding", void 0);
__decorate([
    initial(false),
    signal()
], Node.prototype, "composite", void 0);
__decorate([
    initial('source-over'),
    signal()
], Node.prototype, "compositeOperation", void 0);
__decorate([
    threadable()
], Node.prototype, "tweenCompositeOperation", null);
__decorate([
    initial(1),
    parser((value) => clamp(0, 1, value)),
    signal()
], Node.prototype, "opacity", void 0);
__decorate([
    computed()
], Node.prototype, "absoluteOpacity", null);
__decorate([
    filtersSignal()
], Node.prototype, "filters", void 0);
__decorate([
    initial('#0000'),
    colorSignal()
], Node.prototype, "shadowColor", void 0);
__decorate([
    initial(0),
    signal()
], Node.prototype, "shadowBlur", void 0);
__decorate([
    vector2Signal('shadowOffset')
], Node.prototype, "shadowOffset", void 0);
__decorate([
    initial([]),
    parser(parseShader),
    signal()
], Node.prototype, "shaders", void 0);
__decorate([
    computed()
], Node.prototype, "hasFilters", null);
__decorate([
    computed()
], Node.prototype, "hasShadow", null);
__decorate([
    computed()
], Node.prototype, "filterString", null);
__decorate([
    inspectable(false),
    cloneable(false),
    signal()
], Node.prototype, "spawner", void 0);
__decorate([
    inspectable(false),
    cloneable(false),
    signal()
], Node.prototype, "children", void 0);
__decorate([
    computed()
], Node.prototype, "spawnedChildren", null);
__decorate([
    computed()
], Node.prototype, "sortedChildren", null);
__decorate([
    computed()
], Node.prototype, "localToWorld", null);
__decorate([
    computed()
], Node.prototype, "worldToLocal", null);
__decorate([
    computed()
], Node.prototype, "worldToParent", null);
__decorate([
    computed()
], Node.prototype, "localToParent", null);
__decorate([
    computed()
], Node.prototype, "compositeToWorld", null);
__decorate([
    computed()
], Node.prototype, "compositeRoot", null);
__decorate([
    computed()
], Node.prototype, "compositeToLocal", null);
__decorate([
    computed()
], Node.prototype, "cacheCanvas", null);
__decorate([
    computed()
], Node.prototype, "cachedCanvas", null);
__decorate([
    computed()
], Node.prototype, "cacheBBox", null);
__decorate([
    computed()
], Node.prototype, "fullCacheBBox", null);
__decorate([
    computed()
], Node.prototype, "worldSpaceCacheBBox", null);
__decorate([
    computed()
], Node.prototype, "parentWorldSpaceCacheBBox", null);
Node = Node_1 = __decorate([
    nodeName('Node')
], Node);
export { Node };
Node.prototype.isClass = true;
//# sourceMappingURL=data:application/json;base64,