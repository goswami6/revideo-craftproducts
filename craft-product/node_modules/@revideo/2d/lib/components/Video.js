var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Video_1;
import { BBox, DependencyContext, PlaybackState, viaProxy, } from '@revideo/core';
import { computed, initial, nodeName, signal } from '../decorators';
import { drawImage } from '../utils';
import { Media } from './Media';
class ImageCommunication {
    constructor() {
        this.nextFrameHandlers = [];
        if (!import.meta.hot) {
            throw new Error('FfmpegVideoFrame can only be used with HMR.');
        }
        import.meta.hot.on('revideo:ffmpeg-video-frame-res', this.handler.bind(this));
    }
    handler(event) {
        const handlers = this.nextFrameHandlers;
        this.nextFrameHandlers = [];
        for (const handler of handlers) {
            handler(event);
        }
    }
    async getFrame(id, src, time, duration, fps, png) {
        return new Promise((resolve, reject) => {
            if (!import.meta.hot) {
                reject('FfmpegVideoFrame can only be used with HMR.');
                return;
            }
            function handler(event) {
                const image = new Image();
                const uint8Array = new Uint8Array(event.data.frame.data);
                const type = png ? 'image/png' : 'image/jpeg';
                const blob = new Blob([uint8Array], { type });
                const url = URL.createObjectURL(blob);
                image.src = url;
                image.onload = () => {
                    resolve(image);
                };
            }
            this.nextFrameHandlers.push(handler);
            import.meta.hot.send('revideo:ffmpeg-video-frame', {
                data: {
                    id: id,
                    filePath: src,
                    startTime: time,
                    duration,
                    fps,
                    png,
                },
            });
        });
    }
}
let Video = Video_1 = class Video extends Media {
    constructor(props) {
        super(props);
        this.lastFrame = null;
    }
    desiredSize() {
        const custom = super.desiredSize();
        if (custom.x === null && custom.y === null) {
            const image = this.video();
            return {
                x: image.videoWidth,
                y: image.videoHeight,
            };
        }
        return custom;
    }
    mediaElement() {
        return this.video();
    }
    seekedMedia() {
        return this.seekedVideo();
    }
    fastSeekedMedia() {
        return this.fastSeekedVideo();
    }
    video() {
        const src = viaProxy(this.fullSource());
        const key = `${this.key}/${src}`;
        let video = Video_1.pool[key];
        if (!video) {
            video = document.createElement('video');
            video.crossOrigin = 'anonymous';
            video.src = src;
            Video_1.pool[key] = video;
        }
        if (video.readyState < 2) {
            DependencyContext.collectPromise(new Promise(resolve => {
                const onCanPlay = () => {
                    resolve();
                    video.removeEventListener('canplay', onCanPlay);
                };
                const onError = () => {
                    const reason = this.getErrorReason(video.error?.code);
                    console.log(`ERROR: Error loading video: ${src}, ${reason}`);
                };
                video.addEventListener('canplay', onCanPlay);
                video.addEventListener('error', onError);
            }));
        }
        return video;
    }
    seekedVideo() {
        const video = this.video();
        const time = this.clampTime(this.time());
        video.playbackRate = this.playbackRate();
        if (!video.paused) {
            video.pause();
        }
        if (this.lastTime === time) {
            return video;
        }
        this.setCurrentTime(time);
        return video;
    }
    fastSeekedVideo() {
        const video = this.video();
        const time = this.clampTime(this.time());
        video.playbackRate = this.playbackRate();
        if (this.lastTime === time) {
            return video;
        }
        const playing = this.playing() && time < video.duration && video.playbackRate > 0;
        if (playing) {
            if (video.paused) {
                DependencyContext.collectPromise(video.play());
            }
        }
        else {
            if (!video.paused) {
                video.pause();
            }
        }
        if (Math.abs(video.currentTime - time) > 0.3) {
            this.setCurrentTime(time);
        }
        else if (!playing) {
            video.currentTime = time;
        }
        return video;
    }
    async serverSeekedVideo() {
        const video = this.video();
        const time = this.clampTime(this.time());
        const duration = this.getDuration();
        video.playbackRate = this.playbackRate();
        if (this.lastFrame && this.lastTime === time) {
            return this.lastFrame;
        }
        const fps = this.view().fps() / this.playbackRate();
        if (!Video_1.imageCommunication) {
            throw new Error('ServerSeekedVideo can only be used with HMR.');
        }
        const frame = await Video_1.imageCommunication.getFrame(this.key, video.src, time, duration, fps, this.png());
        this.lastFrame = frame;
        this.lastTime = time;
        return frame;
    }
    async seekFunction() {
        const playbackState = this.view().playbackState();
        if (playbackState === PlaybackState.Playing ||
            playbackState === PlaybackState.Presenting) {
            return this.fastSeekedVideo();
        }
        if (playbackState === PlaybackState.Rendering) {
            return this.serverSeekedVideo();
        }
        return this.seekedVideo();
    }
    async draw(context) {
        this.drawShape(context);
        const alpha = this.alpha();
        if (alpha > 0) {
            const video = await this.seekFunction();
            const box = BBox.fromSizeCentered(this.computedSize());
            context.save();
            context.clip(this.getPath());
            if (alpha < 1) {
                context.globalAlpha *= alpha;
            }
            context.imageSmoothingEnabled = this.smoothing();
            drawImage(context, video, box);
            context.restore();
        }
        if (this.clip()) {
            context.clip(this.getPath());
        }
        await this.drawChildren(context);
    }
    applyFlex() {
        super.applyFlex();
        const video = this.video();
        this.element.style.aspectRatio = (this.ratio() ?? video.videoWidth / video.videoHeight).toString();
    }
};
Video.pool = {};
Video.imageCommunication = !import.meta.hot
    ? null
    : new ImageCommunication();
__decorate([
    initial(1),
    signal()
], Video.prototype, "alpha", void 0);
__decorate([
    initial(true),
    signal()
], Video.prototype, "smoothing", void 0);
__decorate([
    initial(true),
    signal()
], Video.prototype, "png", void 0);
__decorate([
    computed()
], Video.prototype, "video", null);
__decorate([
    computed()
], Video.prototype, "seekedVideo", null);
__decorate([
    computed()
], Video.prototype, "fastSeekedVideo", null);
Video = Video_1 = __decorate([
    nodeName('Video')
], Video);
export { Video };
//# sourceMappingURL=data:application/json;base64,