var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Line_1;
import { BBox, createSignal, threadable, tween, unwrap, useLogger, Vector2, } from '@revideo/core';
import { getPolylineProfile } from '../curves';
import { calculateLerpDistance, polygonLength, polygonPointsLerp, } from '../curves/createCurveProfileLerp';
import { computed, initial, nodeName, signal } from '../decorators';
import { arc, drawLine, drawPivot, lineTo, moveTo } from '../utils';
import { Curve } from './Curve';
import { Layout } from './Layout';
/**
 * A node for drawing lines and polygons.
 *
 * @remarks
 * This node can be used to render any polygonal shape defined by a set of
 * points.
 *
 * @preview
 * ```tsx editor
 * // snippet Simple line
 * import {makeScene2D, Line} from '@revideo/2d';
 *
 * export default makeScene2D(function* (view) {
 *   view.add(
 *     <Line
 *       points={[
 *         [150, 50],
 *         [0, -50],
 *         [-150, 50],
 *       ]}
 *       stroke={'lightseagreen'}
 *       lineWidth={8}
 *       radius={40}
 *       startArrow
 *     />,
 *   );
 * });
 *
 * // snippet Polygon
 * import {makeScene2D, Line} from '@revideo/2d';
 *
 * export default makeScene2D(function* (view) {
 *   view.add(
 *     <Line
 *       points={[
 *         [-200, 70],
 *         [150, 70],
 *         [100, -70],
 *         [-100, -70],
 *       ]}
 *       fill={'lightseagreen'}
 *       closed
 *     />,
 *   );
 * });
 *
 * // snippet Using signals
 * import {makeScene2D, Line} from '@revideo/2d';
 * import {createSignal} from '@revideo/core';
 *
 * export default makeScene2D(function* (view) {
 *   const tip = createSignal(-150);
 *   view.add(
 *     <Line
 *       points={[
 *         [-150, 70],
 *         [150, 70],
 *         // this point is dynamically calculated based on the signal:
 *         () => [tip(), -70],
 *       ]}
 *       stroke={'lightseagreen'}
 *       lineWidth={8}
 *       closed
 *     />,
 *   );
 *
 *   yield* tip(150, 1).back(1);
 * });
 *
 * // snippet Tweening points
 * import {makeScene2D, Line} from '@revideo/2d';
 * import {createRef} from '@revideo/core';
 *
 * export default makeScene2D(function* (view) {
 *   const line = createRef<Line>();
 *   view.add(
 *     <Line
 *       ref={line}
 *       points={[
 *         [-150, 70],
 *         [150, 70],
 *         [0, -70],
 *       ]}
 *       stroke={'lightseagreen'}
 *       lineWidth={8}
 *       radius={20}
 *       closed
 *     />,
 *   );
 *
 *   yield* line()
 *     .points(
 *       [
 *         [-150, 0],
 *         [0, 100],
 *         [150, 0],
 *         [150, -70],
 *         [-150, -70],
 *       ],
 *       2,
 *     )
 *     .back(2);
 * });
 * ```
 */
let Line = Line_1 = class Line extends Curve {
    /**
     * Rotate the points to minimize the overall distance traveled when tweening.
     *
     * @param points - The points to rotate.
     * @param reference - The reference points to which the distance is measured.
     * @param closed - Whether the points form a closed polygon.
     */
    static rotatePoints(points, reference, closed) {
        if (closed) {
            let minDistance = Infinity;
            let bestOffset = 0;
            for (let offset = 0; offset < points.length; offset += 1) {
                const distance = calculateLerpDistance(points, reference, offset);
                if (distance < minDistance) {
                    minDistance = distance;
                    bestOffset = offset;
                }
            }
            if (bestOffset) {
                const spliced = points.splice(0, bestOffset);
                points.splice(points.length, 0, ...spliced);
            }
        }
        else {
            const originalDistance = calculateLerpDistance(points, reference, 0);
            const reversedPoints = [...points].reverse();
            const reversedDistance = calculateLerpDistance(reversedPoints, reference, 0);
            if (reversedDistance < originalDistance) {
                points.reverse();
            }
        }
    }
    /**
     * Distribute additional points along the polyline.
     *
     * @param points - The points of a polyline along which new points should be
     *                 distributed.
     * @param count - The number of points to add.
     */
    static distributePoints(points, count) {
        if (points.length === 0) {
            for (let j = 0; j < count; j++) {
                points.push(Vector2.zero);
            }
            return;
        }
        if (points.length === 1) {
            const point = points[0];
            for (let j = 0; j < count; j++) {
                points.push(point);
            }
            return;
        }
        const desiredLength = points.length + count;
        const arcLength = polygonLength(points);
        let density = count / arcLength;
        let i = 0;
        while (points.length < desiredLength) {
            const pointsLeft = desiredLength - points.length;
            if (i + 1 >= points.length) {
                density = pointsLeft / arcLength;
                i = 0;
                continue;
            }
            const a = points[i];
            const b = points[i + 1];
            const length = a.sub(b).magnitude;
            const pointCount = Math.min(Math.round(length * density), pointsLeft) + 1;
            for (let j = 1; j < pointCount; j++) {
                points.splice(++i, 0, Vector2.lerp(a, b, j / pointCount));
            }
            i++;
        }
    }
    *tweenPoints(value, time, timingFunction) {
        const fromPoints = [...this.parsedPoints()];
        const toPoints = this.parsePoints(unwrap(value));
        const closed = this.closed();
        const diff = fromPoints.length - toPoints.length;
        Line_1.distributePoints(diff < 0 ? fromPoints : toPoints, Math.abs(diff));
        Line_1.rotatePoints(toPoints, fromPoints, closed);
        this.tweenedPoints(fromPoints);
        yield* tween(time, value => {
            const progress = timingFunction(value);
            this.tweenedPoints(polygonPointsLerp(fromPoints, toPoints, progress));
        }, () => {
            this.tweenedPoints(null);
            this.points(value);
        });
    }
    constructor(props) {
        super(props);
        this.tweenedPoints = createSignal(null);
        if (props.children === undefined && props.points === undefined) {
            useLogger().warn({
                message: 'No points specified for the line',
                remarks: "<p>The line won&#39;t be visible unless you specify at least two points:</p>\n<pre class=\"\"><code class=\"language-tsx\">&lt;<span class=\"hljs-title class_\">Line</span>\n  stroke=<span class=\"hljs-string\">&quot;#fff&quot;</span>\n  lineWidth={<span class=\"hljs-number\">8</span>}\n  points={[\n    [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>],\n  ]}\n/&gt;</code></pre><p>Alternatively, you can define the points using the children:</p>\n<pre class=\"\"><code class=\"language-tsx\">&lt;<span class=\"hljs-title class_\">Line</span> stroke=<span class=\"hljs-string\">&quot;#fff&quot;</span> lineWidth={<span class=\"hljs-number\">8</span>}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Node</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">{100}</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Node</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Node</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">{100}</span> /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Line</span>&gt;</code></pre><p>If you did this intentionally, and want to disable this message, set the\n<code>points</code> property to <code>null</code>:</p>\n<pre class=\"\"><code class=\"language-tsx\">&lt;<span class=\"hljs-title class_\">Line</span> stroke=<span class=\"hljs-string\">&quot;#fff&quot;</span> lineWidth={<span class=\"hljs-number\">8</span>} points={<span class=\"hljs-literal\">null</span>} /&gt;</code></pre>",
                inspect: this.key,
            });
        }
    }
    childrenBBox() {
        let points = this.tweenedPoints();
        if (!points) {
            const custom = this.points();
            points = custom
                ? custom.map(signal => new Vector2(unwrap(signal)))
                : this.children()
                    .filter(child => !(child instanceof Layout) || child.isLayoutRoot())
                    .map(child => child.position());
        }
        return BBox.fromPoints(...points);
    }
    parsedPoints() {
        return this.parsePoints(this.points());
    }
    profile() {
        return getPolylineProfile(this.tweenedPoints() ?? this.parsedPoints(), this.radius(), this.closed());
    }
    lineWidthCoefficient() {
        const radius = this.radius();
        const join = this.lineJoin();
        let coefficient = super.lineWidthCoefficient();
        if (radius === 0 && join === 'miter') {
            const { minSin } = this.profile();
            if (minSin > 0) {
                coefficient = Math.max(coefficient, 0.5 / minSin);
            }
        }
        return coefficient;
    }
    drawOverlay(context, matrix) {
        const box = this.childrenBBox().transformCorners(matrix);
        const size = this.computedSize();
        const offset = size.mul(this.offset()).scale(0.5).transformAsPoint(matrix);
        context.fillStyle = 'white';
        context.strokeStyle = 'black';
        context.lineWidth = 1;
        const path = new Path2D();
        const points = (this.tweenedPoints() ?? this.parsedPoints()).map(point => point.transformAsPoint(matrix));
        if (points.length > 0) {
            moveTo(path, points[0]);
            for (const point of points) {
                lineTo(path, point);
                context.beginPath();
                arc(context, point, 4);
                context.closePath();
                context.fill();
                context.stroke();
            }
        }
        context.strokeStyle = 'white';
        context.stroke(path);
        context.beginPath();
        drawPivot(context, offset);
        context.stroke();
        context.beginPath();
        drawLine(context, box);
        context.closePath();
        context.stroke();
    }
    parsePoints(points) {
        return points
            ? points.map(signal => new Vector2(unwrap(signal)))
            : this.children().map(child => child.position());
    }
};
__decorate([
    initial(0),
    signal()
], Line.prototype, "radius", void 0);
__decorate([
    initial(null),
    signal()
], Line.prototype, "points", void 0);
__decorate([
    threadable()
], Line.prototype, "tweenPoints", null);
__decorate([
    computed()
], Line.prototype, "childrenBBox", null);
__decorate([
    computed()
], Line.prototype, "parsedPoints", null);
__decorate([
    computed()
], Line.prototype, "profile", null);
Line = Line_1 = __decorate([
    nodeName('Line')
], Line);
export { Line };
//# sourceMappingURL=data:application/json;base64,