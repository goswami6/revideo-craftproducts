import { SignalValue, SimpleSignal } from '@revideo/core';
import { Rect, RectProps } from './Rect';
export interface MediaProps extends RectProps {
    src?: SignalValue<string>;
    loop?: SignalValue<boolean>;
    playbackRate?: number;
    volume?: number;
    time?: SignalValue<number>;
    play?: boolean;
}
export declare abstract class Media extends Rect {
    readonly src: SimpleSignal<string, this>;
    readonly loop: SimpleSignal<boolean, this>;
    readonly playbackRate: SimpleSignal<number, this>;
    protected readonly time: SimpleSignal<number, this>;
    protected readonly playing: SimpleSignal<boolean, this>;
    protected readonly volume: SimpleSignal<number, this>;
    protected lastTime: number;
    constructor(props: MediaProps);
    assetRoot?: `${string}/`;
    fullSource(): string;
    isPlaying(): boolean;
    getCurrentTime(): number;
    getDuration(): number;
    getVolume(): number;
    dispose(): void;
    completion(): number;
    protected abstract mediaElement(): HTMLMediaElement;
    protected abstract seekedMedia(): HTMLMediaElement;
    protected abstract fastSeekedMedia(): HTMLMediaElement;
    protected abstract draw(context: CanvasRenderingContext2D): Promise<void>;
    protected setCurrentTime(value: number): void;
    protected setVolume(volume: number): void;
    protected setPlaybackRate(playbackRate: number): void;
    play(): void;
    pause(): void;
    clampTime(time: number): number;
    protected collectAsyncResources(): void;
    protected getErrorReason(errCode?: number): string;
}
//# sourceMappingURL=Media.d.ts.map