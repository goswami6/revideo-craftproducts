var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Layout_1;
import { BBox, boolLerp, modify, Origin, originToOffset, threadable, tween, Vector2, } from '@revideo/core';
import { addInitializer, cloneable, computed, defaultStyle, getPropertyMeta, initial, interpolation, nodeName, signal, vector2Signal, } from '../decorators';
import { spacingSignal } from '../decorators/spacingSignal';
import { drawLine, drawPivot, is } from '../utils';
import { Node } from './Node';
let Layout = Layout_1 = class Layout extends Node {
    get columnGap() {
        return this.gap.x;
    }
    get rowGap() {
        return this.gap.y;
    }
    getX() {
        if (this.isLayoutRoot()) {
            return this.x.context.getter();
        }
        return this.computedPosition().x;
    }
    setX(value) {
        this.x.context.setter(value);
    }
    getY() {
        if (this.isLayoutRoot()) {
            return this.y.context.getter();
        }
        return this.computedPosition().y;
    }
    setY(value) {
        this.y.context.setter(value);
    }
    get width() {
        return this.size.x;
    }
    get height() {
        return this.size.y;
    }
    getWidth() {
        return this.computedSize().width;
    }
    setWidth(value) {
        this.width.context.setter(value);
    }
    *tweenWidth(value, time, timingFunction, interpolationFunction) {
        const width = this.desiredSize().x;
        const lock = typeof width !== 'number' || typeof value !== 'number';
        let from;
        if (lock) {
            from = this.size.x();
        }
        else {
            from = width;
        }
        let to;
        if (lock) {
            this.size.x(value);
            to = this.size.x();
        }
        else {
            to = value;
        }
        this.size.x(from);
        lock && this.lockSize();
        yield* tween(time, value => this.size.x(interpolationFunction(from, to, timingFunction(value))));
        this.size.x(value);
        lock && this.releaseSize();
    }
    getHeight() {
        return this.computedSize().height;
    }
    setHeight(value) {
        this.height.context.setter(value);
    }
    *tweenHeight(value, time, timingFunction, interpolationFunction) {
        const height = this.desiredSize().y;
        const lock = typeof height !== 'number' || typeof value !== 'number';
        let from;
        if (lock) {
            from = this.size.y();
        }
        else {
            from = height;
        }
        let to;
        if (lock) {
            this.size.y(value);
            to = this.size.y();
        }
        else {
            to = value;
        }
        this.size.y(from);
        lock && this.lockSize();
        yield* tween(time, value => this.size.y(interpolationFunction(from, to, timingFunction(value))));
        this.size.y(value);
        lock && this.releaseSize();
    }
    /**
     * Get the desired size of this node.
     *
     * @remarks
     * This method can be used to control the size using external factors.
     * By default, the returned size is the same as the one declared by the user.
     */
    desiredSize() {
        return {
            x: this.width.context.getter(),
            y: this.height.context.getter(),
        };
    }
    *tweenSize(value, time, timingFunction, interpolationFunction) {
        const size = this.desiredSize();
        let from;
        if (typeof size.x !== 'number' || typeof size.y !== 'number') {
            from = this.size();
        }
        else {
            from = new Vector2(size);
        }
        let to;
        if (typeof value === 'object' &&
            typeof value.x === 'number' &&
            typeof value.y === 'number') {
            to = new Vector2(value);
        }
        else {
            this.size(value);
            to = this.size();
        }
        this.size(from);
        this.lockSize();
        yield* tween(time, value => this.size(interpolationFunction(from, to, timingFunction(value))));
        this.releaseSize();
        this.size(value);
    }
    constructor(props) {
        super(props);
        this.element.dataset.motionCanvasKey = this.key;
    }
    lockSize() {
        this.sizeLockCounter(this.sizeLockCounter() + 1);
    }
    releaseSize() {
        this.sizeLockCounter(this.sizeLockCounter() - 1);
    }
    parentTransform() {
        return this.findAncestor(is(Layout_1));
    }
    anchorPosition() {
        const size = this.computedSize();
        const offset = this.offset();
        return size.scale(0.5).mul(offset);
    }
    /**
     * Get the resolved layout mode of this node.
     *
     * @remarks
     * When the mode is `null`, its value will be inherited from the parent.
     *
     * Use {@link layout} to get the raw mode set for this node (without
     * inheritance).
     */
    layoutEnabled() {
        return this.layout() ?? this.parentTransform()?.layoutEnabled() ?? false;
    }
    isLayoutRoot() {
        return !this.layoutEnabled() || !this.parentTransform()?.layoutEnabled();
    }
    localToParent() {
        const matrix = super.localToParent();
        const offset = this.offset();
        if (!offset.exactlyEquals(Vector2.zero)) {
            const translate = this.size().mul(offset).scale(-0.5);
            matrix.translateSelf(translate.x, translate.y);
        }
        return matrix;
    }
    /**
     * A simplified version of {@link localToParent} matrix used for transforming
     * direction vectors.
     *
     * @internal
     */
    scalingRotationMatrix() {
        const matrix = new DOMMatrix();
        matrix.rotateSelf(0, 0, this.rotation());
        matrix.scaleSelf(this.scale.x(), this.scale.y());
        const offset = this.offset();
        if (!offset.exactlyEquals(Vector2.zero)) {
            const translate = this.size().mul(offset).scale(-0.5);
            matrix.translateSelf(translate.x, translate.y);
        }
        return matrix;
    }
    getComputedLayout() {
        return new BBox(this.element.getBoundingClientRect());
    }
    computedPosition() {
        this.requestLayoutUpdate();
        const box = this.getComputedLayout();
        const position = new Vector2(box.x + (box.width / 2) * this.offset.x(), box.y + (box.height / 2) * this.offset.y());
        const parent = this.parentTransform();
        if (parent) {
            const parentRect = parent.getComputedLayout();
            position.x -= parentRect.x + (parentRect.width - box.width) / 2;
            position.y -= parentRect.y + (parentRect.height - box.height) / 2;
        }
        return position;
    }
    computedSize() {
        this.requestLayoutUpdate();
        return this.getComputedLayout().size;
    }
    /**
     * Find the closest layout root and apply any new layout changes.
     */
    requestLayoutUpdate() {
        const parent = this.parentTransform();
        if (this.appendedToView()) {
            parent?.requestFontUpdate();
            this.updateLayout();
        }
        else {
            parent.requestLayoutUpdate();
        }
    }
    appendedToView() {
        const root = this.isLayoutRoot();
        if (root) {
            this.view().element.append(this.element);
        }
        return root;
    }
    /**
     * Apply any new layout changes to this node and its children.
     */
    updateLayout() {
        this.applyFont();
        this.applyFlex();
        if (this.layoutEnabled()) {
            const children = this.layoutChildren();
            for (const child of children) {
                child.updateLayout();
            }
        }
    }
    layoutChildren() {
        const queue = [...this.children()];
        const result = [];
        const elements = [];
        while (queue.length) {
            const child = queue.shift();
            if (child instanceof Layout_1) {
                if (child.layoutEnabled()) {
                    result.push(child);
                    elements.push(child.element);
                }
            }
            else if (child) {
                queue.unshift(...child.children());
            }
        }
        this.element.replaceChildren(...elements);
        return result;
    }
    /**
     * Apply any new font changes to this node and all of its ancestors.
     */
    requestFontUpdate() {
        this.appendedToView();
        this.parentTransform()?.requestFontUpdate();
        this.applyFont();
    }
    getCacheBBox() {
        return BBox.fromSizeCentered(this.computedSize());
    }
    async draw(context) {
        if (this.clip()) {
            const size = this.computedSize();
            if (size.width === 0 || size.height === 0) {
                return;
            }
            context.beginPath();
            context.rect(size.width / -2, size.height / -2, size.width, size.height);
            context.closePath();
            context.clip();
        }
        await this.drawChildren(context);
    }
    drawOverlay(context, matrix) {
        const size = this.computedSize();
        const offset = size.mul(this.offset()).scale(0.5).transformAsPoint(matrix);
        const box = BBox.fromSizeCentered(size);
        const layout = box.transformCorners(matrix);
        const padding = box
            .addSpacing(this.padding().scale(-1))
            .transformCorners(matrix);
        const margin = box.addSpacing(this.margin()).transformCorners(matrix);
        context.beginPath();
        drawLine(context, margin);
        drawLine(context, layout);
        context.closePath();
        context.fillStyle = 'rgba(255,193,125,0.6)';
        context.fill('evenodd');
        context.beginPath();
        drawLine(context, layout);
        drawLine(context, padding);
        context.closePath();
        context.fillStyle = 'rgba(180,255,147,0.6)';
        context.fill('evenodd');
        context.beginPath();
        drawLine(context, layout);
        context.closePath();
        context.lineWidth = 1;
        context.strokeStyle = 'white';
        context.stroke();
        context.beginPath();
        drawPivot(context, offset);
        context.stroke();
    }
    getOriginDelta(origin) {
        const size = this.computedSize().scale(0.5);
        const offset = this.offset().mul(size);
        if (origin === Origin.Middle) {
            return offset.flipped;
        }
        const newOffset = originToOffset(origin).mul(size);
        return newOffset.sub(offset);
    }
    /**
     * Update the offset of this node and adjust the position to keep it in the
     * same place.
     *
     * @param offset - The new offset.
     */
    moveOffset(offset) {
        const size = this.computedSize().scale(0.5);
        const oldOffset = this.offset().mul(size);
        const newOffset = offset.mul(size);
        this.offset(offset);
        this.position(this.position().add(newOffset).sub(oldOffset));
    }
    parsePixels(value) {
        return value === null ? '' : `${value}px`;
    }
    parseLength(value) {
        if (value === null) {
            return '';
        }
        if (typeof value === 'string') {
            return value;
        }
        return `${value}px`;
    }
    applyFlex() {
        this.element.style.position = this.isLayoutRoot() ? 'absolute' : 'relative';
        const size = this.desiredSize();
        this.element.style.width = this.parseLength(size.x);
        this.element.style.height = this.parseLength(size.y);
        this.element.style.maxWidth = this.parseLength(this.maxWidth());
        this.element.style.minWidth = this.parseLength(this.minWidth());
        this.element.style.maxHeight = this.parseLength(this.maxHeight());
        this.element.style.minHeight = this.parseLength(this.minHeight());
        this.element.style.aspectRatio =
            this.ratio() === null ? '' : this.ratio().toString();
        this.element.style.marginTop = this.parsePixels(this.margin.top());
        this.element.style.marginBottom = this.parsePixels(this.margin.bottom());
        this.element.style.marginLeft = this.parsePixels(this.margin.left());
        this.element.style.marginRight = this.parsePixels(this.margin.right());
        this.element.style.paddingTop = this.parsePixels(this.padding.top());
        this.element.style.paddingBottom = this.parsePixels(this.padding.bottom());
        this.element.style.paddingLeft = this.parsePixels(this.padding.left());
        this.element.style.paddingRight = this.parsePixels(this.padding.right());
        this.element.style.flexDirection = this.direction();
        this.element.style.flexBasis = this.parseLength(this.basis());
        this.element.style.flexWrap = this.wrap();
        this.element.style.justifyContent = this.justifyContent();
        this.element.style.alignContent = this.alignContent();
        this.element.style.alignItems = this.alignItems();
        this.element.style.alignSelf = this.alignSelf();
        this.element.style.columnGap = this.parseLength(this.gap.x());
        this.element.style.rowGap = this.parseLength(this.gap.y());
        if (this.sizeLockCounter() > 0) {
            this.element.style.flexGrow = '0';
            this.element.style.flexShrink = '0';
        }
        else {
            this.element.style.flexGrow = this.grow().toString();
            this.element.style.flexShrink = this.shrink().toString();
        }
    }
    applyFont() {
        this.element.style.fontFamily = this.fontFamily.isInitial()
            ? ''
            : this.fontFamily();
        this.element.style.fontSize = this.fontSize.isInitial()
            ? ''
            : `${this.fontSize()}px`;
        this.element.style.fontStyle = this.fontStyle.isInitial()
            ? ''
            : this.fontStyle();
        if (this.lineHeight.isInitial()) {
            this.element.style.lineHeight = '';
        }
        else {
            const lineHeight = this.lineHeight();
            this.element.style.lineHeight =
                typeof lineHeight === 'string'
                    ? (parseFloat(lineHeight) / 100).toString()
                    : `${lineHeight}px`;
        }
        this.element.style.fontWeight = this.fontWeight.isInitial()
            ? ''
            : this.fontWeight().toString();
        this.element.style.letterSpacing = this.letterSpacing.isInitial()
            ? ''
            : `${this.letterSpacing()}px`;
        this.element.style.textAlign = this.textAlign.isInitial()
            ? ''
            : this.textAlign();
        if (this.textWrap.isInitial()) {
            this.element.style.whiteSpace = '';
        }
        else {
            const wrap = this.textWrap();
            if (typeof wrap === 'boolean') {
                this.element.style.whiteSpace = wrap ? 'normal' : 'nowrap';
            }
            else {
                this.element.style.whiteSpace = wrap;
            }
        }
    }
    dispose() {
        super.dispose();
        this.sizeLockCounter?.context.dispose();
        if (this.element) {
            this.element.remove();
            this.element.innerHTML = '';
        }
        this.element = null;
        this.styles = null;
    }
    hit(position) {
        const local = position.transformAsPoint(this.localToParent().inverse());
        if (this.cacheBBox().includes(local)) {
            return super.hit(position) ?? this;
        }
        return null;
    }
};
__decorate([
    initial(null),
    interpolation(boolLerp),
    signal()
], Layout.prototype, "layout", void 0);
__decorate([
    initial(null),
    signal()
], Layout.prototype, "maxWidth", void 0);
__decorate([
    initial(null),
    signal()
], Layout.prototype, "maxHeight", void 0);
__decorate([
    initial(null),
    signal()
], Layout.prototype, "minWidth", void 0);
__decorate([
    initial(null),
    signal()
], Layout.prototype, "minHeight", void 0);
__decorate([
    initial(null),
    signal()
], Layout.prototype, "ratio", void 0);
__decorate([
    spacingSignal('margin')
], Layout.prototype, "margin", void 0);
__decorate([
    spacingSignal('padding')
], Layout.prototype, "padding", void 0);
__decorate([
    initial('row'),
    signal()
], Layout.prototype, "direction", void 0);
__decorate([
    initial(null),
    signal()
], Layout.prototype, "basis", void 0);
__decorate([
    initial(0),
    signal()
], Layout.prototype, "grow", void 0);
__decorate([
    initial(1),
    signal()
], Layout.prototype, "shrink", void 0);
__decorate([
    initial('nowrap'),
    signal()
], Layout.prototype, "wrap", void 0);
__decorate([
    initial('start'),
    signal()
], Layout.prototype, "justifyContent", void 0);
__decorate([
    initial('normal'),
    signal()
], Layout.prototype, "alignContent", void 0);
__decorate([
    initial('stretch'),
    signal()
], Layout.prototype, "alignItems", void 0);
__decorate([
    initial('auto'),
    signal()
], Layout.prototype, "alignSelf", void 0);
__decorate([
    initial(0),
    vector2Signal({ x: 'columnGap', y: 'rowGap' })
], Layout.prototype, "gap", void 0);
__decorate([
    defaultStyle('font-family'),
    signal()
], Layout.prototype, "fontFamily", void 0);
__decorate([
    defaultStyle('font-size', parseFloat),
    signal()
], Layout.prototype, "fontSize", void 0);
__decorate([
    defaultStyle('font-style'),
    signal()
], Layout.prototype, "fontStyle", void 0);
__decorate([
    defaultStyle('font-weight', parseInt),
    signal()
], Layout.prototype, "fontWeight", void 0);
__decorate([
    defaultStyle('line-height', parseFloat),
    signal()
], Layout.prototype, "lineHeight", void 0);
__decorate([
    defaultStyle('letter-spacing', i => (i === 'normal' ? 0 : parseFloat(i))),
    signal()
], Layout.prototype, "letterSpacing", void 0);
__decorate([
    defaultStyle('white-space', i => (i === 'pre' ? 'pre' : i === 'normal')),
    signal()
], Layout.prototype, "textWrap", void 0);
__decorate([
    initial('inherit'),
    signal()
], Layout.prototype, "textDirection", void 0);
__decorate([
    defaultStyle('text-align'),
    signal()
], Layout.prototype, "textAlign", void 0);
__decorate([
    initial({ x: null, y: null }),
    vector2Signal({ x: 'width', y: 'height' })
], Layout.prototype, "size", void 0);
__decorate([
    threadable()
], Layout.prototype, "tweenWidth", null);
__decorate([
    threadable()
], Layout.prototype, "tweenHeight", null);
__decorate([
    computed()
], Layout.prototype, "desiredSize", null);
__decorate([
    threadable()
], Layout.prototype, "tweenSize", null);
__decorate([
    vector2Signal('offset')
], Layout.prototype, "offset", void 0);
__decorate([
    originSignal(Origin.Middle)
], Layout.prototype, "middle", void 0);
__decorate([
    originSignal(Origin.Top)
], Layout.prototype, "top", void 0);
__decorate([
    originSignal(Origin.Bottom)
], Layout.prototype, "bottom", void 0);
__decorate([
    originSignal(Origin.Left)
], Layout.prototype, "left", void 0);
__decorate([
    originSignal(Origin.Right)
], Layout.prototype, "right", void 0);
__decorate([
    originSignal(Origin.TopLeft)
], Layout.prototype, "topLeft", void 0);
__decorate([
    originSignal(Origin.TopRight)
], Layout.prototype, "topRight", void 0);
__decorate([
    originSignal(Origin.BottomLeft)
], Layout.prototype, "bottomLeft", void 0);
__decorate([
    originSignal(Origin.BottomRight)
], Layout.prototype, "bottomRight", void 0);
__decorate([
    initial(false),
    signal()
], Layout.prototype, "clip", void 0);
__decorate([
    initial(0),
    signal()
], Layout.prototype, "sizeLockCounter", void 0);
__decorate([
    computed()
], Layout.prototype, "parentTransform", null);
__decorate([
    computed()
], Layout.prototype, "anchorPosition", null);
__decorate([
    computed()
], Layout.prototype, "layoutEnabled", null);
__decorate([
    computed()
], Layout.prototype, "isLayoutRoot", null);
__decorate([
    computed()
], Layout.prototype, "scalingRotationMatrix", null);
__decorate([
    computed()
], Layout.prototype, "computedPosition", null);
__decorate([
    computed()
], Layout.prototype, "computedSize", null);
__decorate([
    computed()
], Layout.prototype, "requestLayoutUpdate", null);
__decorate([
    computed()
], Layout.prototype, "appendedToView", null);
__decorate([
    computed()
], Layout.prototype, "updateLayout", null);
__decorate([
    computed()
], Layout.prototype, "layoutChildren", null);
__decorate([
    computed()
], Layout.prototype, "requestFontUpdate", null);
__decorate([
    computed()
], Layout.prototype, "applyFlex", null);
__decorate([
    computed()
], Layout.prototype, "applyFont", null);
Layout = Layout_1 = __decorate([
    nodeName('Layout')
], Layout);
export { Layout };
function originSignal(origin) {
    return (target, key) => {
        signal()(target, key);
        cloneable(false)(target, key);
        const meta = getPropertyMeta(target, key);
        meta.parser = value => new Vector2(value);
        meta.getter = function () {
            return this.computedSize()
                .getOriginOffset(origin)
                .transformAsPoint(this.localToParent());
        };
        meta.setter = function (value) {
            this.position(modify(value, unwrapped => this.getOriginDelta(origin)
                .transform(this.scalingRotationMatrix())
                .flipped.add(unwrapped)));
            return this;
        };
    };
}
addInitializer(Layout.prototype, instance => {
    instance.element = document.createElement('div');
    instance.element.style.display = 'flex';
    instance.element.style.boxSizing = 'border-box';
    instance.styles = getComputedStyle(instance.element);
});
//# sourceMappingURL=data:application/json;base64,