var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BBox, createSignal, ExperimentalError, lazy, map, unwrap, } from '@revideo/core';
import { CodeCursor, codeSignal, CodeSignalContext, DefaultHighlightStyle, findAllCodeRanges, isPointInCodeSelection, LezerHighlighter, lines, parseCodeSelection, resolveScope, } from '../code';
import { computed, initial, nodeName, parser, signal } from '../decorators';
import { useScene2D } from '../scenes';
import { Shape } from './Shape';
/**
 * A node for displaying and animating code.
 *
 * @experimental
 *
 * @preview
 * ```tsx editor
 * import {parser} from '@lezer/javascript';
 * import {Code, LezerHighlighter, makeScene2D} from '@revideo/2d';
 * import {createRef} from '@revideo/core';
 *
 * export default makeScene2D(function* (view) {
 *   LezerHighlighter.registerParser(parser);
 *   const code = createRef<Code>();
 *
 *   view.add(
 *     <Code
 *       ref={code}
 *       offset={-1}
 *       position={view.size().scale(-0.5).add(60)}
 *       fontFamily={'JetBrains Mono, monospace'}
 *       fontSize={36}
 *       code={`\
 * function hello() {
 *   console.log('Hello');
 * }`}
 *     />,
 *   );
 *
 *   yield* code()
 *     .code(
 *       `\
 * function hello() {
 *   console.warn('Hello World');
 * }`,
 *       1,
 *     )
 *     .wait(0.5)
 *     .back(1)
 *     .wait(0.5);
 * });
 * ```
 */
let Code = class Code extends Shape {
    /**
     * Create a standalone code signal.
     *
     * @param initial - The initial code.
     * @param highlighter - Custom highlighter to use.
     * @param dialect - Custom dialect to use.
     */
    static createSignal(initial, highlighter, dialect) {
        return new CodeSignalContext(initial, undefined, highlighter, dialect).toSignal();
    }
    *tweenSelection(value, duration, timingFunction) {
        this.oldSelection = this.selection();
        this.selection(value);
        this.selectionProgress(0);
        yield* this.selectionProgress(1, duration, timingFunction);
        this.selectionProgress(null);
        this.oldSelection = null;
    }
    /**
     * Get the currently displayed code as a string.
     */
    parsed() {
        return resolveScope(this.code(), scope => unwrap(scope.progress) > 0.5);
    }
    highlighterCache() {
        const highlighter = this.highlighter();
        if (!highlighter || !highlighter.initialize())
            return null;
        const code = this.code();
        const before = resolveScope(code, false);
        const after = resolveScope(code, true);
        const dialect = this.dialect();
        return {
            before: highlighter.prepare(before, dialect),
            after: highlighter.prepare(after, dialect),
        };
    }
    get cursor() {
        this.cursorCache ?? (this.cursorCache = new CodeCursor(this));
        return this.cursorCache;
    }
    constructor(props) {
        super({
            fontFamily: 'monospace',
            ...props,
        });
        this.oldSelection = null;
        this.selectionProgress = createSignal(null);
        if (!useScene2D().experimentalFeatures) {
            throw new ExperimentalError('The Code node is an experimental feature');
        }
    }
    /**
     * Create a child code signal.
     *
     * @param initial - The initial code.
     */
    createSignal(initial) {
        return new CodeSignalContext(initial, this, this.highlighter, this.dialect).toSignal();
    }
    /**
     * Find all code ranges that match the given pattern.
     *
     * @param pattern - Either a string or a regular expression to match.
     */
    findAllRanges(pattern) {
        return findAllCodeRanges(this.parsed(), pattern);
    }
    /**
     * Find the first code range that matches the given pattern.
     *
     * @param pattern - Either a string or a regular expression to match.
     */
    findFirstRange(pattern) {
        return (findAllCodeRanges(this.parsed(), pattern, 1)[0] ?? [
            [0, 0],
            [0, 0],
        ]);
    }
    /**
     * Find the last code range that matches the given pattern.
     *
     * @param pattern - Either a string or a regular expression to match.
     */
    findLastRange(pattern) {
        return (findAllCodeRanges(this.parsed(), pattern).at(-1) ?? [
            [0, 0],
            [0, 0],
        ]);
    }
    /**
     * Return the bounding box of the given point (character) in the code.
     *
     * @remarks
     * The returned bound box is in local space of the `Code` node.
     *
     * @param point - The point to get the bounding box for.
     */
    getPointBbox(point) {
        const [line, column] = point;
        const drawingInfo = this.drawingInfo();
        let match;
        for (const info of drawingInfo.fragments) {
            if (info.cursor.y < line) {
                match = info;
                continue;
            }
            if (info.cursor.y === line && info.cursor.x < column) {
                match = info;
                continue;
            }
            break;
        }
        if (!match)
            return new BBox();
        const size = this.computedSize();
        return new BBox(match.position
            .sub(size.scale(0.5))
            .addX(match.characterSize.x * (column - match.cursor.x)), match.characterSize);
    }
    /**
     * Return bounding boxes of all characters in the selection.
     *
     * @remarks
     * The returned bound boxes are in local space of the `Code` node.
     * Each line of code has a separate bounding box.
     *
     * @param selection - The selection to get the bounding boxes for.
     */
    getSelectionBbox(selection) {
        const size = this.computedSize();
        const range = parseCodeSelection(selection);
        const drawingInfo = this.drawingInfo();
        const bboxes = [];
        let current = null;
        let line = 0;
        let column = 0;
        for (const info of drawingInfo.fragments) {
            if (info.cursor.y !== line) {
                line = info.cursor.y;
                if (current) {
                    bboxes.push(current);
                    current = null;
                }
            }
            column = info.cursor.x;
            for (let i = 0; i < info.text.length; i++) {
                if (isPointInCodeSelection([line, column], range)) {
                    const bbox = new BBox(info.position
                        .sub(size.scale(0.5))
                        .addX(info.characterSize.x * (column - info.cursor.x)), info.characterSize);
                    if (!current) {
                        current = bbox;
                    }
                    else {
                        current = current.union(bbox);
                    }
                }
                else if (current) {
                    bboxes.push(current);
                    current = null;
                }
                column++;
            }
        }
        if (current) {
            bboxes.push(current);
        }
        return bboxes;
    }
    drawingInfo() {
        this.requestFontUpdate();
        const context = this.cacheCanvas();
        const code = this.code();
        context.save();
        this.applyStyle(context);
        this.applyText(context);
        this.cursor.setupDraw(context);
        this.cursor.drawScope(code);
        const info = this.cursor.getDrawingInfo();
        context.restore();
        return info;
    }
    desiredSize() {
        this.requestFontUpdate();
        const context = this.cacheCanvas();
        const code = this.code();
        context.save();
        this.applyStyle(context);
        this.applyText(context);
        this.cursor.setupMeasure(context);
        this.cursor.measureSize(code);
        const size = this.cursor.getSize();
        context.restore();
        return size;
    }
    async draw(context) {
        this.requestFontUpdate();
        this.applyStyle(context);
        this.applyText(context);
        const size = this.computedSize();
        const drawingInfo = this.drawingInfo();
        context.save();
        context.translate(-size.width / 2, -size.height / 2 + drawingInfo.verticalOffset);
        const drawHooks = this.drawHooks();
        for (const info of drawingInfo.fragments) {
            context.save();
            context.globalAlpha *= info.alpha;
            drawHooks.token(context, info.text, info.position, info.fill, info.time);
            context.restore();
        }
        context.restore();
        await this.drawChildren(context);
    }
    applyText(context) {
        super.applyText(context);
        context.font = this.styles.font;
        context.textBaseline = 'top';
        if ('letterSpacing' in context) {
            context.letterSpacing = this.styles.letterSpacing;
        }
    }
    collectAsyncResources() {
        super.collectAsyncResources();
        this.highlighter()?.initialize();
    }
};
__decorate([
    initial(''),
    signal()
], Code.prototype, "dialect", void 0);
__decorate([
    initial(() => Code.defaultHighlighter),
    signal()
], Code.prototype, "highlighter", void 0);
__decorate([
    codeSignal()
], Code.prototype, "code", void 0);
__decorate([
    initial({
        token(ctx, text, position, color, selection) {
            ctx.fillStyle = color;
            ctx.globalAlpha *= map(0.2, 1, selection);
            ctx.fillText(text, position.x, position.y);
        },
    }),
    signal()
], Code.prototype, "drawHooks", void 0);
__decorate([
    initial(lines(0, Infinity)),
    parser(parseCodeSelection),
    signal()
], Code.prototype, "selection", void 0);
__decorate([
    computed()
], Code.prototype, "parsed", null);
__decorate([
    computed()
], Code.prototype, "highlighterCache", null);
__decorate([
    computed()
], Code.prototype, "drawingInfo", null);
__decorate([
    lazy(() => new LezerHighlighter(DefaultHighlightStyle))
], Code, "defaultHighlighter", void 0);
Code = __decorate([
    nodeName('CodeBlock')
], Code);
export { Code };
//# sourceMappingURL=data:application/json;base64,