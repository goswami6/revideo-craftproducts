import type { Root } from 'hast';
import type { CodeStyle } from './style';
export interface StarryNight {
    flagToScope: (flag: string) => string | undefined;
    highlight: (value: string, scope: string) => Root;
}
export declare function ready(): Promise<void>;
export interface CodeTree {
    language: string;
    spans: string[];
    nodes: Code[];
}
export declare type Code = CodeTree | string;
export declare type TaggedFunction = (code: TemplateStringsArray, ...rest: Code[]) => CodeTree;
export declare type LanguageDictionary = Record<string, TaggedFunction>;
export declare const language: LanguageDictionary;
export declare type Location = [number, number];
export interface Token {
    code: string;
    color: string;
}
export interface MorphToken extends Token {
    morph: 'create' | 'delete' | 'retain';
    from: Location | null;
    to: Location | null;
}
export declare function parse(code: CodeTree, options?: {
    codeStyle?: CodeStyle;
}): Token[];
export declare function getColor(classList: string[], codeStyle: CodeStyle): string | undefined;
export declare function toString(tokens: Token[]): string;
export declare function diff(start: CodeTree, end: CodeTree, options?: {
    codeStyle?: CodeStyle;
}): MorphToken[];
//# sourceMappingURL=tags.d.ts.map