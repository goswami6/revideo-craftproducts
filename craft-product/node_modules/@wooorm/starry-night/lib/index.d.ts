/**
 * Create a `StarryNight` that can highlight things based on the given
 * `grammars`.
 * This is async to facilitate async loading and registering, which is currently
 * only used for WASM.
 *
 * @param {Array<Grammar>} grammars
 *   Grammars to support.
 * @param {Options} [options]
 *   Configuration (optional).
 */
export function createStarryNight(
  grammars: Array<Grammar>,
  options?: Options | undefined
): Promise<{
  flagToScope: (flag: string) => string | undefined
  scopes: () => Array<string>
  register: (grammars: Array<Grammar>) => Promise<void>
  highlight: (value: string, scope: string) => Root
}>
export type Root = import('hast').Root
export type Rule = RuleInclude | RuleName | RuleDefinition
export type Grammar = {
  scopeName: string
  names: Array<string>
  extensions: Array<string>
  patterns: Array<Rule>
  repository?: Record<string, Rule>
  injections?: Record<string, Rule>
}
export type RuleName = {
  name: string
  include?: never
  begin?: never
  match?: never
}
export type RuleInclude = {
  include: string
  name?: never
  begin?: never
  match?: never
}
export type RuleDefinition = {
  match?: string
  captures?: Captures
  begin?: string
  beginCaptures?: Captures
  end?: string
  endCaptures?: Captures
  while?: string
  whileCaptures?: Captures
  name?: string
  contentName?: string
  patterns?: Array<Rule>
  repository?: Record<string, Rule>
  injections?: Record<string, Rule>
  applyEndPatternLast?: boolean
}
export type Captures = Record<string, Rule>
/**
 * Configuration (optional).
 */
export type Options = {
  /**
   * Get a URL to the oniguruma WASM, typically used in browsers.
   */
  getOnigurumaUrlFetch?: GetOnigurumaUrl
  /**
   * Get a URL to the oniguruma WASM, typically used in Node.js.
   */
  getOnigurumaUrlFs?: GetOnigurumaUrl
}
/**
 * Get a URL to the oniguruma WASM.
 *
 * > 👉 **Note**: this must currently result in a version 1 URL of
 * > `onig.wasm` from `vscode-oniguruma`.
 *
 * > ⚠️ **Danger**: when you use this functionality, your project might break at
 * > any time (when reinstalling dependencies), except when you make sure that
 * > the WASM binary you load manually is what our internally used
 * > `vscode-oniguruma` dependency expects.
 * > To solve this, you could for example use an npm script called `dependencies`
 * > (which runs everytime `node_modules` is changed) which copies
 * > `vscode-oniguruma/release/onig.wasm` to the place you want to host it.
 */
export type GetOnigurumaUrl = () => URL | Promise<URL>
